<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
  	<link href="epub.css" media="all" rel="stylesheet" type="text/css" />
  	<script type="text/javascript" src="svg.js"></script>
  </head>
  <body id="conceptual_flow_with_tasks">
    <div class="content-wrapper">
      <div id="chapter_container" class='conceptualwithtasks'>
  <article class="chapter">
    <a id="TP40014097-CH35">&#x200c;</a><a id="TP40014097-CH35-XID_460">&#x200c;</a>
    <h2 class="chapter-name">Attributes</h2>
      
      	<section class="section">
      		<p class="para"><em>Attributes</em> provide more information about a declaration or type. There are two kinds of attributes in Swift, those that apply to declarations and those that apply to types. For instance, the <code class="code-voice">required</code> attribute—when applied to a designated or convenience initializer declaration of a class—indicates that every subclass must implement that initializer. And the <code class="code-voice">noreturn</code> attribute—when applied to a function or method type—indicates that the function or method doesn’t return to its caller.</p><p class="para">You specify an attribute by writing the <code class="code-voice">@</code> symbol followed by the attribute’s name and any arguments that the attribute accepts:</p>
<span class="caption"></span>
<div class="code-outline">
  <ul class="code-outline-lines code-voice">
    <li><pre class="code-voice">@<em class="variable-text">attribute name</em></pre></li><li><pre class="code-voice">@<em class="variable-text">attribute name</em>(<em class="variable-text">attribute arguments</em>)</pre></li>
  </ul>
</div><p class="para">Some declaration attributes accept arguments that specify more information about the attribute and how it applies to a particular declaration. These <em>attribute arguments</em> are enclosed in parentheses, and their format is defined by the attribute they belong to.</p>
    		</section> 


      <section class="section">
	<a id="TP40014097-CH35-XID_461">&#x200c;</a>
  <h3 class="section-name">Declaration Attributes</h3>
  <p class="para">You can apply a declaration attribute to declarations only. However, you can also apply the <code class="code-voice">noreturn</code> attribute to a function or method <em>type</em>.</p><dl class="term-definition termdef">
	<dt class="term"><code class="code-voice">assignment</code></dt><dd class='definition'><p class="para">Apply this attribute to functions that overload a compound assignment operator. Functions that overload a compound assignment operator must mark their initial input parameter as <code class="code-voice">inout</code>. For an example of how to use the <code class="code-voice">assignment</code> attribute, see <a href="AdvancedOperators.xhtml#TP40014097-CH27-XID_45" data-id="//apple_ref/doc/uid/TP40014097-CH27-XID_45" rel="me">Compound Assignment Operators</a>.</p></dd>
</dl><dl class="term-definition termdef">
	<dt class="term"><code class="code-voice">class_protocol</code></dt><dd class='definition'><p class="para">Apply this attribute to a protocol to indicate that the protocol can be adopted by class types only.</p><p class="para">If you apply the <code class="code-voice">objc</code> attribute to a protocol, the <code class="code-voice">class_protocol</code> attribute is implicitly applied to that protocol; there’s no need to mark the protocol with the <code class="code-voice">class_protocol</code> attribute explicitly.</p></dd><dt class="term"><code class="code-voice">exported</code></dt><dd class='definition'><p class="para">Apply this attribute to an import declaration to export the imported module, submodule, or declaration from the current module. If another module imports the current module, that other module can access the items exported by the current module.</p></dd><dt class="term"><code class="code-voice">final</code></dt><dd class='definition'><p class="para">Apply this attribute to a class or to a property, method, or subscript member of a class. It’s applied to a class to indicate that the class can’t be subclassed. It’s applied to a property, method, or subscript of a class to indicate that that class member can’t be overridden in any subclass.</p></dd>
</dl><dl class="term-definition termdef">
	<dt class="term"><code class="code-voice">lazy</code></dt><dd class='definition'><p class="para">Apply this attribute to a stored variable property of a class or structure to indicate that the property’s initial value is calculated and stored at most once, when the property is first accessed. For an example of how to use the <code class="code-voice">lazy</code> attribute, see <a href="Properties.xhtml#TP40014097-CH14-XID_326" data-id="//apple_ref/doc/uid/TP40014097-CH14-XID_326" rel="me">Lazy Stored Properties</a>.</p></dd><dt class="term"><code class="code-voice">noreturn</code></dt><dd class='definition'><p class="para">Apply this attribute to a function or method declaration to indicate that the corresponding type of that function or method, <code class="code-voice">T</code>, is <code class="code-voice">@noreturn T</code>. You can mark a function or method type with this attribute to indicate that the function or method doesn’t return to its caller.</p><p class="para">You can override a function or method that is not marked with the <code class="code-voice">noreturn</code> attribute with a function or method that is. That said, you can’t override a function or method that is marked with the <code class="code-voice">noreturn</code> attribute with a function or method that is not. Similar rules apply when you implement a protocol method in a conforming type.</p></dd><dt class="term"><code class="code-voice">NSCopying</code></dt><dd class='definition'><p class="para">Apply this attribute to a stored variable property of a class. This attribute causes the property’s setter to be synthesized with a <em>copy</em> of the property’s value—returned by the <code class="code-voice">copyWithZone</code> method—instead of the value of the property itself. The type of the property must conform to the <code class="code-voice">NSCopying</code> protocol.</p><p class="para">The <code class="code-voice">NSCopying</code> attribute behaves in a way similar to the Objective-C <code class="code-voice">copy</code> property attribute.</p></dd>
</dl><dl class="term-definition termdef">
	<dt class="term"><code class="code-voice">NSManaged</code></dt><dd class='definition'><p class="para">Apply this attribute to a stored variable property of a class that inherits from <code class="code-voice">NSManagedObject</code> to indicate that the storage and implementation of the property are provided dynamically by Core Data at runtime based on the associated entity description.</p></dd><dt class="term"><code class="code-voice">objc</code></dt><dd class='definition'><p class="para">Apply this attribute to any declaration that can be represented in Objective-C—for example, non-nested classes, protocols, properties and methods (including getters and setters) of classes and protocols, initializers, deinitializers, and subscripts. The <code class="code-voice">objc</code> attribute tells the compiler that a declaration is available to use in Objective-C code.</p><p class="para">If you apply the <code class="code-voice">objc</code> attribute to a class or protocol, it’s implicitly applied to the members of that class or protocol. The compiler also implicitly adds the <code class="code-voice">objc</code> attribute to a class that inherits from another class marked with the <code class="code-voice">objc</code> attribute. Protocols marked with the <code class="code-voice">objc</code> attribute can’t inherit from protocols that aren’t.</p><p class="para">The <code class="code-voice">objc</code> attribute optionally accepts a single attribute argument, which consists of an identifier. Use this attribute when you want to expose a different name to Objective-C for the entity the <code class="code-voice">objc</code> attribute applies to. You can use this argument to name classes, protocols, methods, getters, setters, and initializers. The example below exposes the getter for the <code class="code-voice">enabled</code> property of the <code class="code-voice">ExampleClass</code> to Objective-C code as <code class="code-voice">isEnabled</code> rather than just as the name of the property itself.</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="kt">@objc</code></code></li>
          <li><code class="code-voice"><code class="kt">class</code> <code class="vc">ExampleClass</code> {</code></li>
          <li><code class="code-voice">    <code class="kt">var</code> <code class="vc">enabled</code>: <code class="n"><!-- a href="" logicalPath="" -->Bool<!-- /a --></code> {</code></li>
          <li><code class="code-voice">    <code class="kt">@objc</code>(<code class="vc">isEnabled</code>) <code class="kt">get</code> {</code></li>
          <li><code class="code-voice">        <code class="c">// Return the appropriate value</code></code></li>
          <li><code class="code-voice">    }</code></li>
          <li><code class="code-voice">    }</code></li>
          <li><code class="code-voice">}</code></li>
      </ul>



  </div>
</section></dd>
</dl><dl class="term-definition termdef">
	<dt class="term"><code class="code-voice">optional</code></dt><dd class='definition'><p class="para">Apply this attribute to a protocol’s property, method, or subscript members to indicate that a conforming type isn’t required to implement those members.</p><p class="para">You can apply the <code class="code-voice">optional</code> attribute only to protocols that are marked with the <code class="code-voice">objc</code> attribute. As a result, only class types can adopt and conform to a protocol that contains optional member requirements. For more information about how to use the <code class="code-voice">optional</code> attribute and for guidance about how to access optional protocol members—for example, when you’re not sure whether a conforming type implements them—see <a href="Protocols.xhtml#TP40014097-CH25-XID_365" data-id="//apple_ref/doc/uid/TP40014097-CH25-XID_365" rel="me">Optional Protocol Requirements</a>.</p></dd>
</dl><dl class="term-definition termdef">
	<dt class="term"><code class="code-voice">required</code></dt><dd class='definition'><p class="para">Apply this attribute to a designated or convenience initializer of a class to indicate that every subclass must implement that initializer.</p><p class="para">Required designated initializers must be implemented explicitly. Required convenience initializers can be either implemented explicitly or inherited when the subclass directly implements all of the superclass’s designated initializers (or when the subclass overrides the designated initializers with convenience initializers).</p></dd>
</dl>
  <section class="section">
	<a id="TP40014097-CH35-XID_462">&#x200c;</a>
  <h3 class="section-name">Declaration Attributes Used by Interface Builder</h3>
  <p class="para">Interface Builder attributes are declaration attributes used by Interface Builder to synchronize with Xcode. Swift provides the following Interface Builder attributes: <code class="code-voice">IBAction</code>, <code class="code-voice">IBDesignable</code>, <code class="code-voice">IBInspectable</code>, and <code class="code-voice">IBOutlet</code>. These attributes are conceptually the same as their Objective-C counterparts.</p><p class="para">You apply the <code class="code-voice">IBOutlet</code> and <code class="code-voice">IBInspectable</code> attributes to property declarations of a class. You apply the <code class="code-voice">IBAction</code> attribute to method declarations of a class and the <code class="code-voice">IBDesignable</code> attribute to class declarations.</p>
  
</section>

</section>
<section class="section">
	<a id="TP40014097-CH35-XID_463">&#x200c;</a>
  <h3 class="section-name">Type Attributes</h3>
  <p class="para">You can apply type attributes to types only. However, you can also apply the <code class="code-voice">noreturn</code> attribute to a function or method <em>declaration</em>.</p><dl class="term-definition termdef">
	<dt class="term"><code class="code-voice">auto_closure</code></dt><dd class='definition'><p class="para">This attribute is used to delay the evaluation of an expression by automatically wrapping that expression in a closure with no arguments. Apply this attribute to a function or method type that takes no arguments and that returns the type of the expression. For an example of how to use the <code class="code-voice">auto_closure</code> attribute, see <a href="Types.xhtml#TP40014097-CH31-XID_1005" data-id="//apple_ref/doc/uid/TP40014097-CH31-XID_1005" rel="me">Function Type</a>.</p></dd><dt class="term"><code class="code-voice">noreturn</code></dt><dd class='definition'><p class="para">Apply this attribute to the type of a function or method to indicate that the function or method doesn’t return to its caller. You can also mark a function or method declaration with this attribute to indicate that the corresponding type of that function or method, <code class="code-voice">T</code>, is <code class="code-voice">@noreturn T</code>.</p></dd>
</dl><div class="syntax-defs">
  <p class="syntax-defs-name">
  Grammar of an attribute
</p><div class="syntax-defs-group">
  <p class="syntax-def">
  <a id="attribute">&#x200c;</a>
  <span class="syntax-def-name">
  attribute
</span>
<span class="arrow">
  →
</span><code class="literal">@</code><span class="syntactic-cat"><a href="Attributes.xhtml#attribute-name" data-id="//apple_ref/swift/grammar/attribute-name" rel="me">attribute-name</a></span><span class="optional"><span class="syntactic-cat"><a href="Attributes.xhtml#attribute-argument-clause" data-id="//apple_ref/swift/grammar/attribute-argument-clause" rel="me">attribute-argument-clause</a></span><sub class="subscript">opt</sub></span>
</p><p class="syntax-def">
  <a id="attribute-name">&#x200c;</a>
  <span class="syntax-def-name">
  attribute-name
</span>
<span class="arrow">
  →
</span><span class="syntactic-cat"><a href="LexicalStructure.xhtml#identifier" data-id="//apple_ref/swift/grammar/identifier" rel="me">identifier</a></span>
</p><p class="syntax-def">
  <a id="attribute-argument-clause">&#x200c;</a>
  <span class="syntax-def-name">
  attribute-argument-clause
</span>
<span class="arrow">
  →
</span><code class="literal">(</code><span class="optional"><span class="syntactic-cat"><a href="Attributes.xhtml#balanced-tokens" data-id="//apple_ref/swift/grammar/balanced-tokens" rel="me">balanced-tokens</a></span><sub class="subscript">opt</sub></span><code class="literal">)</code>
</p><p class="syntax-def">
  <a id="attributes">&#x200c;</a>
  <span class="syntax-def-name">
  attributes
</span>
<span class="arrow">
  →
</span><span class="syntactic-cat"><a href="Attributes.xhtml#attribute" data-id="//apple_ref/swift/grammar/attribute" rel="me">attribute</a></span><span class="optional"><span class="syntactic-cat"><a href="Attributes.xhtml#attributes" data-id="//apple_ref/swift/grammar/attributes" rel="me">attributes</a></span><sub class="subscript">opt</sub></span>
</p>
</div><div class="syntax-defs-group">
  <p class="syntax-def">
  <a id="balanced-tokens">&#x200c;</a>
  <span class="syntax-def-name">
  balanced-tokens
</span>
<span class="arrow">
  →
</span><span class="syntactic-cat"><a href="Attributes.xhtml#balanced-token" data-id="//apple_ref/swift/grammar/balanced-token" rel="me">balanced-token</a></span><span class="optional"><span class="syntactic-cat"><a href="Attributes.xhtml#balanced-tokens" data-id="//apple_ref/swift/grammar/balanced-tokens" rel="me">balanced-tokens</a></span><sub class="subscript">opt</sub></span>
</p><p class="syntax-def">
  <a id="balanced-token">&#x200c;</a>
  <span class="syntax-def-name">
  balanced-token
</span>
<span class="arrow">
  →
</span><code class="literal">(</code><span class="optional"><span class="syntactic-cat"><a href="Attributes.xhtml#balanced-tokens" data-id="//apple_ref/swift/grammar/balanced-tokens" rel="me">balanced-tokens</a></span><sub class="subscript">opt</sub></span><code class="literal">)</code>
</p><p class="syntax-def">
  <a id="TP40014097-CH35-XID_471">&#x200c;</a>
  <span class="syntax-def-name">
  balanced-token
</span>
<span class="arrow">
  →
</span><code class="literal">[</code><span class="optional"><span class="syntactic-cat"><a href="Attributes.xhtml#balanced-tokens" data-id="//apple_ref/swift/grammar/balanced-tokens" rel="me">balanced-tokens</a></span><sub class="subscript">opt</sub></span><code class="literal">]</code>
</p><p class="syntax-def">
  <a id="TP40014097-CH35-XID_472">&#x200c;</a>
  <span class="syntax-def-name">
  balanced-token
</span>
<span class="arrow">
  →
</span><code class="literal">{</code><span class="optional"><span class="syntactic-cat"><a href="Attributes.xhtml#balanced-tokens" data-id="//apple_ref/swift/grammar/balanced-tokens" rel="me">balanced-tokens</a></span><sub class="subscript">opt</sub></span><code class="literal">}</code>
</p><p class="syntax-def">
  <a id="TP40014097-CH35-XID_473">&#x200c;</a>
  <span class="syntax-def-name">
  balanced-token
</span>
<span class="arrow">
  →
</span><span class="text-description">Any identifier, keyword, literal, or operator</span>
</p><p class="syntax-def">
  <a id="TP40014097-CH35-XID_474">&#x200c;</a>
  <span class="syntax-def-name">
  balanced-token
</span>
<span class="arrow">
  →
</span><span class="text-description">Any punctuation except <code class="literal">(</code>, <code class="literal">)</code>, <code class="literal">[</code>, <code class="literal">]</code>, <code class="literal">{</code>, or <code class="literal">}</code></span>
</p>
</div>
 </div>
  
</section>

  </article>
</div>
    </div>
  </body>
</html>
