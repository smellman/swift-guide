<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
  	<link href="epub.css" media="all" rel="stylesheet" type="text/css" />
  	<script type="text/javascript" src="svg.js"></script>
  </head>
  <body id="conceptual_flow_with_tasks">
    <div class="content-wrapper">
      <div id="chapter_container" class='conceptualwithtasks'>
  <article class="chapter">
    <a id="TP40014097-CH5">&#x200c;</a><a id="TP40014097-CH5-XID_399">&#x200c;</a>
    <h2 class="chapter-name">The Basics</h2>
      
      	<section class="section">
      		<p class="para">Swift is a new programming language for iOS and OS X app development. Nonetheless, many parts of Swift will be familiar from your experience of developing in C and Objective-C.</p><p class="para">Swift provides its own versions of all fundamental C and Objective-C types, including <code class="code-voice">Int</code> for integers; <code class="code-voice">Double</code> and <code class="code-voice">Float</code> for floating-point values; <code class="code-voice">Bool</code> for Boolean values; and <code class="code-voice">String</code> for textual data. Swift also provides powerful versions of the two primary collection types, <code class="code-voice">Array</code> and <code class="code-voice">Dictionary</code>, as described in <a href="CollectionTypes.xhtml" data-id="//apple_ref/doc/uid/TP40014097-CH8-XID_133" rel="me">Collection Types</a>.</p><p class="para">Like C, Swift uses variables to store and refer to values by an identifying name. Swift also makes extensive use of variables whose values cannot be changed. These are known as constants, and are much more powerful than constants in C. Constants are used throughout Swift to make code safer and clearer in intent when you work with values that do not need to change.</p><p class="para">In addition to familiar types, Swift introduces advanced types not found in Objective-C. These include tuples, which enable you to create and pass around groupings of values. Tuples can return multiple values from a function as a single compound value.</p><p class="para">Swift also introduces optional types, which handle the absence of a value. Optionals say either ‚Äúthere <em>is</em> a value, and it equals <em>x</em>‚Äù or ‚Äúthere <em>isn‚Äôt</em> a value at all‚Äù. Optionals are similar to using <code class="code-voice">nil</code> with pointers in Objective-C, but they work for any type, not just classes. Optionals are safer and more expressive than <code class="code-voice">nil</code> pointers in Objective-C and are at the heart of many of Swift‚Äôs most powerful features.</p><p class="para">Optionals are an example of the fact that Swift is a <em>type safe</em> language. Swift helps you to be clear about the types of values your code can work with. If part of your code expects a <code class="code-voice">String</code>, type safety prevents you from passing it an <code class="code-voice">Int</code> by mistake. This enables you to catch and fix errors as early as possible in the development process.</p>
    		</section> 


      <section class="section">
	<a id="TP40014097-CH5-XID_400">&#x200c;</a>
  <h3 class="section-name">Constants and Variables</h3>
  <p class="para">Constants and variables associate a name (such as <code class="code-voice">maximumNumberOfLoginAttempts</code> or <code class="code-voice">welcomeMessage</code>) with a value of a particular type (such as the number <code class="code-voice">10</code> or the string <code class="code-voice">&quot;Hello&quot;</code>). The value of a <em>constant</em> cannot be changed once it is set, whereas a <em>variable</em> can be set to a different value in the future.</p>
  <section class="section">
	<a id="TP40014097-CH5-XID_401">&#x200c;</a>
  <h3 class="section-name">Declaring Constants and Variables</h3>
  <p class="para">Constants and variables must be declared before they are used. You declare constants with the <code class="code-voice">let</code> keyword and variables with the <code class="code-voice">var</code> keyword. Here‚Äôs an example of how constants and variables can be used to track the number of login attempts a user has made:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="kt">let</code> <code class="vc">maximumNumberOfLoginAttempts</code> = <code class="m">10</code></code></li>
          <li><code class="code-voice"><code class="kt">var</code> <code class="vc">currentLoginAttempt</code> = <code class="m">0</code></code></li>
      </ul>



  </div>
</section><p class="para">This code can be read as:</p><p class="para">‚ÄúDeclare a new constant called <code class="code-voice">maximumNumberOfLoginAttempts</code>, and give it a value of <code class="code-voice">10</code>. Then, declare a new variable called <code class="code-voice">currentLoginAttempt</code>, and give it an initial value of <code class="code-voice">0</code>.‚Äù</p><p class="para">In this example, the maximum number of allowed login attempts is declared as a constant, because the maximum value never changes. The current login attempt counter is declared as a variable, because this value must be incremented after each failed login attempt.</p><p class="para">You can declare multiple constants or multiple variables on a single line, separated by commas:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="kt">var</code> <code class="vc">x</code> = <code class="m">0.0</code>, <code class="vc">y</code> = <code class="m">0.0</code>, <code class="vc">z</code> = <code class="m">0.0</code></code></li>
      </ul>



  </div>
</section><div class="note">
  <aside class="aside">
    	<p class="aside-title uppercase">Note</p>
    	<p class="para">If a stored value in your code is not going to change, always declare it as a constant with the <code class="code-voice">let</code> keyword. Use variables only for storing values that need to be able to change.
    	</p>
    
  </aside>
</div>
  
</section>
<section class="section">
	<a id="TP40014097-CH5-XID_403">&#x200c;</a>
  <h3 class="section-name">Type Annotations</h3>
  <p class="para">You can provide a <em>type annotation</em> when you declare a constant or variable, to be clear about the kind of values the constant or variable can store. Write a type annotation by placing a colon after the constant or variable name, followed by a space, followed by the name of the type to use.</p><p class="para">This example provides a type annotation for a variable called <code class="code-voice">welcomeMessage</code>, to indicate that the variable can store <code class="code-voice">String</code> values:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="kt">var</code> <code class="vc">welcomeMessage</code>: <code class="n"><!-- a href="" logicalPath="" -->String<!-- /a --></code></code></li>
      </ul>



  </div>
</section><p class="para">The colon in the declaration means <em>‚Äú‚Ä¶of type‚Ä¶,‚Äù</em> so the code above can be read as:</p><p class="para">‚ÄúDeclare a variable called <code class="code-voice">welcomeMessage</code> that is of type <code class="code-voice">String</code>.‚Äù</p><p class="para">The phrase ‚Äúof type <code class="code-voice">String</code>‚Äù means ‚Äúcan store any <code class="code-voice">String</code> value.‚Äù Think of it as meaning ‚Äúthe type of thing‚Äù (or ‚Äúthe kind of thing‚Äù) that can be stored.</p><p class="para">The <code class="code-voice">welcomeMessage</code> variable can now be set to any string value without error:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="vc">welcomeMessage</code> = <code class="s">&quot;Hello&quot;</code></code></li>
      </ul>



  </div>
</section><div class="note">
  <aside class="aside">
    	<p class="aside-title uppercase">Note</p>
    	<p class="para">It is rare that you need to write type annotations in practice. If you provide an initial value for a constant or variable at the point that it is defined, Swift can almost always infer the type to be used for that constant or variable, as described in <a href="TheBasics.xhtml#TP40014097-CH5-XID_418" data-id="//apple_ref/doc/uid/TP40014097-CH5-XID_418" rel="me">Type Safety and Type Inference</a>. In the <code class="code-voice">welcomeMessage</code> example above, no initial value is provided, and so the type of the <code class="code-voice">welcomeMessage</code> variable is specified with a type annotation rather than being inferred from an initial value.
    	</p>
    
  </aside>
</div>
  
</section>
<section class="section">
	<a id="TP40014097-CH5-XID_405">&#x200c;</a>
  <h3 class="section-name">Naming Constants and Variables</h3>
  <p class="para">You can use almost any character you like for constant and variable names, including Unicode characters:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="kt">let</code> <code class="vc">œÄ</code> = <code class="m">3.14159</code></code></li>
          <li><code class="code-voice"><code class="kt">let</code> <code class="vc">‰Ω†Â•Ω</code> = <code class="s">&quot;‰Ω†Â•Ω‰∏ñÁïå&quot;</code></code></li>
          <li><code class="code-voice"><code class="kt">let</code> <code class="vc">üê∂üêÆ</code> = <code class="s">&quot;dogcow&quot;</code></code></li>
      </ul>



  </div>
</section><p class="para">Constant and variable names cannot contain mathematical symbols, arrows, private-use (or invalid) Unicode code points, or line- and box-drawing characters. Nor can they begin with a number, although numbers may be included elsewhere within the name.</p><p class="para">Once you‚Äôve declared a constant or variable of a certain type, you can‚Äôt redeclare it again with the same name, or change it to store values of a different type. Nor can you change a constant into a variable or a variable into a constant.</p><div class="note">
  <aside class="aside">
    	<p class="aside-title uppercase">Note</p>
    	<p class="para">If you need to give a constant or variable the same name as a reserved Swift keyword, you can do so by surrounding the keyword with back ticks (<code class="code-voice">`</code>) when using it as a name. However, you should avoid using keywords as names unless you have absolutely no choice.
    	</p>
    
  </aside>
</div><p class="para">You can change the value of an existing variable to another value of a compatible type. In this example, the value of <code class="code-voice">friendlyWelcome</code> is changed from <code class="code-voice">&quot;Hello!&quot;</code> to <code class="code-voice">&quot;Bonjour!&quot;</code>:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="kt">var</code> <code class="vc">friendlyWelcome</code> = <code class="s">&quot;Hello!&quot;</code></code></li>
          <li><code class="code-voice"><code class="vc">friendlyWelcome</code> = <code class="s">&quot;Bonjour!&quot;</code></code></li>
          <li><code class="code-voice"><code class="c">// friendlyWelcome is now &quot;Bonjour!&quot;</code></code></li>
      </ul>



  </div>
</section><p class="para">Unlike a variable, the value of a constant cannot be changed once it is set. Attempting to do so is reported as an error when your code is compiled:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="kt">let</code> <code class="vc">languageName</code> = <code class="s">&quot;Swift&quot;</code></code></li>
          <li><code class="code-voice"><code class="vc">languageName</code> = <code class="s">&quot;Swift++&quot;</code></code></li>
          <li><code class="code-voice"><code class="c">// this is a compile-time error - languageName cannot be changed</code></code></li>
      </ul>



  </div>
</section>
  
</section>
<section class="section">
	<a id="TP40014097-CH5-XID_407">&#x200c;</a>
  <h3 class="section-name">Printing Constants and Variables</h3>
  <p class="para">You can print the current value of a constant or variable with the <code class="code-voice">println</code> function:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="vc">println</code>(<code class="vc">friendlyWelcome</code>)</code></li>
          <li><code class="code-voice"><code class="c">// prints &quot;Bonjour!&quot;</code></code></li>
      </ul>



  </div>
</section><p class="para"><code class="code-voice">println</code> is a global function that prints a value, followed by a line break, to an appropriate output. If you are working in Xcode, for example, <code class="code-voice">println</code> prints its output in Xcode‚Äôs ‚Äúconsole‚Äù pane. (A second function, <code class="code-voice">print</code>, performs the same task without appending a line break to the end of the value to be printed.)</p><p class="para">The <code class="code-voice">println</code> function prints any <code class="code-voice">String</code> value you pass to it:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="vc">println</code>(<code class="s">&quot;This is a string&quot;</code>)</code></li>
          <li><code class="code-voice"><code class="c">// prints &quot;This is a string&quot;</code></code></li>
      </ul>



  </div>
</section><p class="para">The <code class="code-voice">println</code> function can print more complex logging messages, in a similar manner to Cocoa‚Äôs <code class="code-voice">NSLog</code> function. These messages can include the current values of constants and variables.</p><p class="para">Swift uses <em>string interpolation</em> to include the name of a constant or variable as a placeholder in a longer string, and to prompt Swift to replace it with the current value of that constant or variable. Wrap the name in parentheses and escape it with a backslash before the opening parenthesis:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="vc">println</code>(<code class="s">&quot;The current value of friendlyWelcome is </code>\(<code class="vc">friendlyWelcome</code>)<code class="s">&quot;</code>)</code></li>
          <li><code class="code-voice"><code class="c">// prints &quot;The current value of friendlyWelcome is Bonjour!&quot;</code></code></li>
      </ul>



  </div>
</section><div class="note">
  <aside class="aside">
    	<p class="aside-title uppercase">Note</p>
    	<p class="para">All options you can use with string interpolation are described in <a href="StringsAndCharacters.xhtml#TP40014097-CH7-XID_381" data-id="//apple_ref/doc/uid/TP40014097-CH7-XID_381" rel="me">String Interpolation</a>.
    	</p>
    
  </aside>
</div>
  
</section>

</section>
<section class="section">
	<a id="TP40014097-CH5-XID_409">&#x200c;</a>
  <h3 class="section-name">Comments</h3>
  <p class="para">Use comments to include non-executable text in your code, as a note or reminder to yourself. Comments are ignored by the Swift compiler when your code is compiled.</p><p class="para">Comments in Swift are very similar to comments in C. Single-line comments begin with two forward-slashes (<code class="code-voice">//</code>):</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="c">// this is a comment</code></code></li>
      </ul>



  </div>
</section><p class="para">You can also write multiline comments, which start with a forward-slash followed by an asterisk (<code class="code-voice">/*</code>) and end with an asterisk followed by a forward-slash (<code class="code-voice">*/</code>):</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="c">/* this is also a comment,</code></code></li>
          <li><code class="code-voice"><code class="c">but written over multiple lines */</code></code></li>
      </ul>



  </div>
</section><p class="para">Unlike multiline comments in C, multiline comments in Swift can be nested inside other multiline comments. You write nested comments by starting a multiline comment block and then starting a second multiline comment within the first block. The second block is then closed, followed by the first block:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="c">/* this is the start of the first multiline comment</code></code></li>
          <li><code class="code-voice"><code class="c">/* this is the second, nested multiline comment */</code></code></li>
          <li><code class="code-voice"><code class="c">this is the end of the first multiline comment */</code></code></li>
      </ul>



  </div>
</section><p class="para">Nested multiline comments enable you to comment out large blocks of code quickly and easily, even if the code already contains multiline comments.</p>
  
</section>
<section class="section">
	<a id="TP40014097-CH5-XID_410">&#x200c;</a>
  <h3 class="section-name">Semicolons</h3>
  <p class="para">Unlike many other languages, Swift does not require you to write a semicolon (<code class="code-voice">;</code>) after each statement in your code, although you can do so if you wish. Semicolons <em>are</em> required, however, if you want to write multiple separate statements on a single line:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="kt">let</code> <code class="vc">cat</code> = <code class="s">&quot;üê±&quot;</code>; <code class="vc">println</code>(<code class="vc">cat</code>)</code></li>
          <li><code class="code-voice"><code class="c">// prints &quot;üê±&quot;</code></code></li>
      </ul>



  </div>
</section>
  
</section>
<section class="section">
	<a id="TP40014097-CH5-XID_411">&#x200c;</a>
  <h3 class="section-name">Integers</h3>
  <p class="para"><em>Integers</em> are whole numbers with no fractional component, such as <code class="code-voice">42</code> and <code class="code-voice">-23</code>. Integers are either <em>signed</em> (positive, zero, or negative) or <em>unsigned</em> (positive or zero).</p><p class="para">Swift provides signed and unsigned integers in 8, 16, 32, and 64 bit forms. These integers follow a naming convention similar to C, in that an 8-bit unsigned integer is of type <code class="code-voice">UInt8</code>, and a 32-bit signed integer is of type <code class="code-voice">Int32</code>. Like all types in Swift, these integer types have capitalized names.</p>
  <section class="section">
	<a id="TP40014097-CH5-XID_412">&#x200c;</a>
  <h3 class="section-name">Integer Bounds</h3>
  <p class="para">You can access the minimum and maximum values of each integer type with its <code class="code-voice">min</code> and <code class="code-voice">max</code> properties:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="kt">let</code> <code class="vc">minValue</code> = <code class="vc">UInt8</code>.<code class="vc">min</code>  <code class="c">// minValue is equal to 0, and is of type UInt8</code></code></li>
          <li><code class="code-voice"><code class="kt">let</code> <code class="vc">maxValue</code> = <code class="vc">UInt8</code>.<code class="vc">max</code>  <code class="c">// maxValue is equal to 255, and is of type UInt8</code></code></li>
      </ul>



  </div>
</section><p class="para">The values of these properties are of the appropriate-sized number type (such as <code class="code-voice">UInt8</code> in the example above) and can therefore be used in expressions alongside other values of the same type.</p>
  
</section>
<section class="section">
	<a id="TP40014097-CH5-XID_413">&#x200c;</a>
  <h3 class="section-name">Int</h3>
  <p class="para">In most cases, you don‚Äôt need to pick a specific size of integer to use in your code. Swift provides an additional integer type, <code class="code-voice">Int</code>, which has the same size as the current platform‚Äôs native word size:</p><ul class="list-bullet">
  <li class="item"><p class="para">On a 32-bit platform, <code class="code-voice">Int</code> is the same size as <code class="code-voice">Int32</code>.</p></li><li class="item"><p class="para">On a 64-bit platform, <code class="code-voice">Int</code> is the same size as <code class="code-voice">Int64</code>.</p></li>
</ul><p class="para">Unless you need to work with a specific size of integer, always use <code class="code-voice">Int</code> for integer values in your code. This aids code consistency and interoperability. Even on 32-bit platforms, <code class="code-voice">Int</code> can store any value between <code class="code-voice">-2,147,483,648</code> and <code class="code-voice">2,147,483,647</code>, and is large enough for many integer ranges.</p>
  
</section>
<section class="section">
	<a id="TP40014097-CH5-XID_414">&#x200c;</a>
  <h3 class="section-name">UInt</h3>
  <p class="para">Swift also provides an unsigned integer type, <code class="code-voice">UInt</code>, which has the same size as the current platform‚Äôs native word size:</p><ul class="list-bullet">
  <li class="item"><p class="para">On a 32-bit platform, <code class="code-voice">UInt</code> is the same size as <code class="code-voice">UInt32</code>.</p></li><li class="item"><p class="para">On a 64-bit platform, <code class="code-voice">UInt</code> is the same size as <code class="code-voice">UInt64</code>.</p></li>
</ul><div class="note">
  <aside class="aside">
    	<p class="aside-title uppercase">Note</p>
    	<p class="para">Use <code class="code-voice">UInt</code> only when you specifically need an unsigned integer type with the same size as the platform‚Äôs native word size. If this is not the case, <code class="code-voice">Int</code> is preferred, even when the values to be stored are known to be non-negative. A consistent use of <code class="code-voice">Int</code> for integer values aids code interoperability, avoids the need to convert between different number types, and matches integer type inference, as described in <a href="TheBasics.xhtml#TP40014097-CH5-XID_418" data-id="//apple_ref/doc/uid/TP40014097-CH5-XID_418" rel="me">Type Safety and Type Inference</a>.
    	</p>
    
  </aside>
</div>
  
</section>

</section>
<section class="section">
	<a id="TP40014097-CH5-XID_416">&#x200c;</a>
  <h3 class="section-name">Floating-Point Numbers</h3>
  <p class="para"><em>Floating-point numbers</em> are numbers with a fractional component, such as <code class="code-voice">3.14159</code>, <code class="code-voice">0.1</code>, and <code class="code-voice">-273.15</code>.</p><p class="para">Floating-point types can represent a much wider range of values than integer types, and can store numbers that are much larger or smaller than can be stored in an <code class="code-voice">Int</code>. Swift provides two signed floating-point number types:</p><ul class="list-bullet">
  <li class="item"><p class="para"><code class="code-voice">Double</code> represents a 64-bit floating-point number. Use it when floating-point values must be very large or particularly precise.</p></li><li class="item"><p class="para"><code class="code-voice">Float</code> represents a 32-bit floating-point number. Use it when floating-point values do not require 64-bit precision.</p></li>
</ul><div class="note">
  <aside class="aside">
    	<p class="aside-title uppercase">Note</p>
    	<p class="para"><code class="code-voice">Double</code> has a precision of at least 15 decimal digits, whereas the precision of <code class="code-voice">Float</code> can be as little as 6 decimal digits. The appropriate floating-point type to use depends on the nature and range of values you need to work with in your code.
    	</p>
    
  </aside>
</div>
  
</section>
<section class="section">
	<a id="TP40014097-CH5-XID_418">&#x200c;</a>
  <h3 class="section-name">Type Safety and Type Inference</h3>
  <p class="para">Swift is a <em>type safe</em> language. A type safe language encourages you to be clear about the types of values your code can work with. If part of your code expects a <code class="code-voice">String</code>, you can‚Äôt pass it an <code class="code-voice">Int</code> by mistake.</p><p class="para">Because Swift is type safe, it performs <em>type checks</em> when compiling your code and flags any mismatched types as errors. This enables you to catch and fix errors as early as possible in the development process.</p><p class="para">Type-checking helps you avoid errors when you‚Äôre working with different types of values. However, this doesn‚Äôt mean that you have to specify the type of every constant and variable that you declare. If you don‚Äôt specify the type of value you need, Swift uses <em>type inference</em> to work out the appropriate type. Type inference enables a compiler to deduce the type of a particular expression automatically when it compiles your code, simply by examining the values you provide.</p><p class="para">Because of type inference, Swift requires far fewer type declarations than languages such as C or Objective-C. Constants and variables are still explicitly typed, but much of the work of specifying their type is done for you.</p><p class="para">Type inference is particularly useful when you declare a constant or variable with an initial value. This is often done by assigning a <em>literal value</em> (or <em>literal</em>) to the constant or variable at the point that you declare it. (A literal value is a value that appears directly in your source code, such as <code class="code-voice">42</code> and <code class="code-voice">3.14159</code> in the examples below.)</p><p class="para">For example, if you assign a literal value of <code class="code-voice">42</code> to a new constant without saying what type it is, Swift infers that you want the constant to be an <code class="code-voice">Int</code>, because you have initialized it with a number that looks like an integer:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="kt">let</code> <code class="vc">meaningOfLife</code> = <code class="m">42</code></code></li>
          <li><code class="code-voice"><code class="c">// meaningOfLife is inferred to be of type Int</code></code></li>
      </ul>



  </div>
</section><p class="para">Likewise, if you don‚Äôt specify a type for a floating-point literal, Swift infers that you want to create a <code class="code-voice">Double</code>:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="kt">let</code> <code class="vc">pi</code> = <code class="m">3.14159</code></code></li>
          <li><code class="code-voice"><code class="c">// pi is inferred to be of type Double</code></code></li>
      </ul>



  </div>
</section><p class="para">Swift always chooses <code class="code-voice">Double</code> (rather than <code class="code-voice">Float</code>) when inferring the type of floating-point numbers.</p><p class="para">If you combine integer and floating-point literals in an expression, a type of <code class="code-voice">Double</code> will be inferred from the context:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="kt">let</code> <code class="vc">anotherPi</code> = <code class="m">3</code> + <code class="m">0.14159</code></code></li>
          <li><code class="code-voice"><code class="c">// anotherPi is also inferred to be of type Double</code></code></li>
      </ul>



  </div>
</section><p class="para">The literal value of <code class="code-voice">3</code> has no explicit type in and of itself, and so an appropriate output type of <code class="code-voice">Double</code> is inferred from the presence of a floating-point literal as part of the addition.</p>
  
</section>
<section class="section">
	<a id="TP40014097-CH5-XID_419">&#x200c;</a>
  <h3 class="section-name">Numeric Literals</h3>
  <p class="para">Integer literals can be written as:</p><ul class="list-bullet">
  <li class="item"><p class="para">A <em>decimal</em> number, with no prefix</p></li><li class="item"><p class="para">A <em>binary</em> number, with a <code class="code-voice">0b</code> prefix</p></li><li class="item"><p class="para">An <em>octal</em> number, with a <code class="code-voice">0o</code> prefix</p></li><li class="item"><p class="para">A <em>hexadecimal</em> number, with a <code class="code-voice">0x</code> prefix</p></li>
</ul><p class="para">All of these integer literals have a decimal value of <code class="code-voice">17</code>:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="kt">let</code> <code class="vc">decimalInteger</code> = <code class="m">17</code></code></li>
          <li><code class="code-voice"><code class="kt">let</code> <code class="vc">binaryInteger</code> = <code class="m">0b10001</code>       <code class="c">// 17 in binary notation</code></code></li>
          <li><code class="code-voice"><code class="kt">let</code> <code class="vc">octalInteger</code> = <code class="m">0o21</code>           <code class="c">// 17 in octal notation</code></code></li>
          <li><code class="code-voice"><code class="kt">let</code> <code class="vc">hexadecimalInteger</code> = <code class="m">0x11</code>     <code class="c">// 17 in hexadecimal notation</code></code></li>
      </ul>



  </div>
</section><p class="para">Floating-point literals can be decimal (with no prefix), or hexadecimal (with a <code class="code-voice">0x</code> prefix). They must always have a number (or hexadecimal number) on both sides of the decimal point. They can also have an optional <em>exponent</em>, indicated by an uppercase or lowercase <code class="code-voice">e</code> for decimal floats, or an uppercase or lowercase <code class="code-voice">p</code> for hexadecimal floats.</p><p class="para">For decimal numbers with an exponent of <code class="code-voice">exp</code>, the base number is multiplied by 10<sup>exp</sup>:</p><ul class="list-bullet">
  <li class="item"><p class="para"><code class="code-voice">1.25e2</code> means 1.25 √ó 10<sup>2</sup>, or <code class="code-voice">125.0</code>.</p></li><li class="item"><p class="para"><code class="code-voice">1.25e-2</code> means 1.25 √ó 10<sup>-2</sup>, or <code class="code-voice">0.0125</code>.</p></li>
</ul><p class="para">For hexadecimal numbers with an exponent of <code class="code-voice">exp</code>, the base number is multiplied by 2<sup>exp</sup>:</p><ul class="list-bullet">
  <li class="item"><p class="para"><code class="code-voice">0xFp2</code> means 15 √ó 2<sup>2</sup>, or <code class="code-voice">60.0</code>.</p></li><li class="item"><p class="para"><code class="code-voice">0xFp-2</code> means 15 √ó 2<sup>-2</sup>, or <code class="code-voice">3.75</code>.</p></li>
</ul><p class="para">All of these floating-point literals have a decimal value of <code class="code-voice">12.1875</code>:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="kt">let</code> <code class="vc">decimalDouble</code> = <code class="m">12.1875</code></code></li>
          <li><code class="code-voice"><code class="kt">let</code> <code class="vc">exponentDouble</code> = <code class="m">1.21875e1</code></code></li>
          <li><code class="code-voice"><code class="kt">let</code> <code class="vc">hexadecimalDouble</code> = <code class="m">0xC.3p0</code></code></li>
      </ul>



  </div>
</section><p class="para">Numeric literals can contain extra formatting to make them easier to read. Both integers and floats can be padded with extra zeroes and can contain underscores to help with readability. Neither type of formatting affects the underlying value of the literal:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="kt">let</code> <code class="vc">paddedDouble</code> = <code class="m">000123.456</code></code></li>
          <li><code class="code-voice"><code class="kt">let</code> <code class="vc">oneMillion</code> = <code class="m">1_000_000</code></code></li>
          <li><code class="code-voice"><code class="kt">let</code> <code class="vc">justOverOneMillion</code> = <code class="m">1_000_000.000_000_1</code></code></li>
      </ul>



  </div>
</section>
  
</section>
<section class="section">
	<a id="TP40014097-CH5-XID_420">&#x200c;</a>
  <h3 class="section-name">Numeric Type Conversion</h3>
  <p class="para">Use the <code class="code-voice">Int</code> type for all general-purpose integer constants and variables in your code, even if they are known to be non-negative. Using the default integer type in everyday situations means that integer constants and variables are immediately interoperable in your code and will match the inferred type for integer literal values.</p><p class="para">Use other integer types only when they are are specifically needed for the task at hand, because of explicitly-sized data from an external source, or for performance, memory usage, or other necessary optimization. Using explicitly-sized types in these situations helps to catch any accidental value overflows and implicitly documents the nature of the data being used.</p>
  <section class="section">
	<a id="TP40014097-CH5-XID_421">&#x200c;</a>
  <h3 class="section-name">Integer Conversion</h3>
  <p class="para">The range of numbers that can be stored in an integer constant or variable is different for each numeric type. An <code class="code-voice">Int8</code> constant or variable can store numbers between <code class="code-voice">-128</code> and <code class="code-voice">127</code>, whereas a <code class="code-voice">UInt8</code> constant or variable can store numbers between <code class="code-voice">0</code> and <code class="code-voice">255</code>. A number that will not fit into a constant or variable of a sized integer type is reported as an error when your code is compiled:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="kt">let</code> <code class="vc">cannotBeNegative</code>: <code class="n"><!-- a href="" logicalPath="" -->UInt8<!-- /a --></code> = -<code class="m">1</code></code></li>
          <li><code class="code-voice"><code class="c">// UInt8 cannot store negative numbers, and so this will report an error</code></code></li>
          <li><code class="code-voice"><code class="kt">let</code> <code class="vc">tooBig</code>: <code class="n"><!-- a href="" logicalPath="" -->Int8<!-- /a --></code> = <code class="vc">Int8</code>.<code class="vc">max</code> + <code class="m">1</code></code></li>
          <li><code class="code-voice"><code class="c">// Int8 cannot store a number larger than its maximum value,</code></code></li>
          <li><code class="code-voice"><code class="c">// and so this will also report an error</code></code></li>
      </ul>



  </div>
</section><p class="para">Because each numeric type can store a different range of values, you must opt in to numeric type conversion on a case-by-case basis. This opt-in approach prevents hidden conversion errors and helps make type conversion intentions explicit in your code.</p><p class="para">To convert one specific number type to another, you initialize a new number of the desired type with the existing value. In the example below, the constant <code class="code-voice">twoThousand</code> is of type <code class="code-voice">UInt16</code>, whereas the constant <code class="code-voice">one</code> is of type <code class="code-voice">UInt8</code>. They cannot be added together directly, because they are not of the same type. Instead, this example calls <code class="code-voice">UInt16(one)</code> to create a new <code class="code-voice">UInt16</code> initialized with the value of <code class="code-voice">one</code>, and uses this value in place of the original:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="kt">let</code> <code class="vc">twoThousand</code>: <code class="n"><!-- a href="" logicalPath="" -->UInt16<!-- /a --></code> = <code class="m">2_000</code></code></li>
          <li><code class="code-voice"><code class="kt">let</code> <code class="vc">one</code>: <code class="n"><!-- a href="" logicalPath="" -->UInt8<!-- /a --></code> = <code class="m">1</code></code></li>
          <li><code class="code-voice"><code class="kt">let</code> <code class="vc">twoThousandAndOne</code> = <code class="vc">twoThousand</code> + <code class="vc">UInt16</code>(<code class="vc">one</code>)</code></li>
      </ul>



  </div>
</section><p class="para">Because both sides of the addition are now of type <code class="code-voice">UInt16</code>, the addition is allowed. The output constant (<code class="code-voice">twoThousandAndOne</code>) is inferred to be of type <code class="code-voice">UInt16</code>, because it is the sum of two <code class="code-voice">UInt16</code> values.</p><p class="para"><code class="code-voice">SomeType(ofInitialValue)</code> is the default way to call the initializer of a Swift type and pass in an initial value. Behind the scenes, <code class="code-voice">UInt16</code> has an initializer that accepts a <code class="code-voice">UInt8</code> value, and so this initializer is used to make a new <code class="code-voice">UInt16</code> from an existing <code class="code-voice">UInt8</code>. You can‚Äôt pass in <em>any</em> type here, however‚Äîit has to be a type for which <code class="code-voice">UInt16</code> provides an initializer. Extending existing types to provide initializers that accept new types (including your own type definitions) is covered in <a href="Extensions.xhtml" data-id="//apple_ref/doc/uid/TP40014097-CH24-XID_191" rel="me">Extensions</a>.</p>
  
</section>
<section class="section">
	<a id="TP40014097-CH5-XID_422">&#x200c;</a>
  <h3 class="section-name">Integer and Floating-Point Conversion</h3>
  <p class="para">Conversions between integer and floating-point numeric types must be made explicit:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="kt">let</code> <code class="vc">three</code> = <code class="m">3</code></code></li>
          <li><code class="code-voice"><code class="kt">let</code> <code class="vc">pointOneFourOneFiveNine</code> = <code class="m">0.14159</code></code></li>
          <li><code class="code-voice"><code class="kt">let</code> <code class="vc">pi</code> = <code class="vc">Double</code>(<code class="vc">three</code>) + <code class="vc">pointOneFourOneFiveNine</code></code></li>
          <li><code class="code-voice"><code class="c">// pi equals 3.14159, and is inferred to be of type Double</code></code></li>
      </ul>



  </div>
</section><p class="para">Here, the value of the constant <code class="code-voice">three</code> is used to create a new value of type <code class="code-voice">Double</code>, so that both sides of the addition are of the same type. Without this conversion in place, the addition would not be allowed.</p><p class="para">The reverse is also true for floating-point to integer conversion, in that an integer type can be initialized with a <code class="code-voice">Double</code> or <code class="code-voice">Float</code> value:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="kt">let</code> <code class="vc">integerPi</code> = <code class="vc">Int</code>(<code class="vc">pi</code>)</code></li>
          <li><code class="code-voice"><code class="c">// integerPi equals 3, and is inferred to be of type Int</code></code></li>
      </ul>



  </div>
</section><p class="para">Floating-point values are always truncated when used to initialize a new integer value in this way. This means that <code class="code-voice">4.75</code> becomes <code class="code-voice">4</code>, and <code class="code-voice">-3.9</code> becomes <code class="code-voice">-3</code>.</p><div class="note">
  <aside class="aside">
    	<p class="aside-title uppercase">Note</p>
    	<p class="para">The rules for combining numeric constants and variables are different from the rules for numeric literals. The literal value <code class="code-voice">3</code> can be added directly to the literal value <code class="code-voice">0.14159</code>, because number literals do not have an explicit type in and of themselves. Their type is inferred only at the point that they are evaluated by the compiler.
    	</p>
    
  </aside>
</div>
  
</section>

</section>
<section class="section">
	<a id="TP40014097-CH5-XID_424">&#x200c;</a>
  <h3 class="section-name">Type Aliases</h3>
  <p class="para"><em>Type aliases</em> define an alternative name for an existing type. You define type aliases with the <code class="code-voice">typealias</code> keyword.</p><p class="para">Type aliases are useful when you want to refer to an existing type by a name that is contextually more appropriate, such as when working with data of a specific size from an external source:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="kt">typealias</code> <code class="vc">AudioSample</code> = <code class="n"><!-- a href="" logicalPath="" -->UInt16<!-- /a --></code></code></li>
      </ul>



  </div>
</section><p class="para">Once you define a type alias, you can use the alias anywhere you might use the original name:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="kt">var</code> <code class="vc">maxAmplitudeFound</code> = <code class="vc">AudioSample</code>.<code class="vc">min</code></code></li>
          <li><code class="code-voice"><code class="c">// maxAmplitudeFound is now 0</code></code></li>
      </ul>



  </div>
</section><p class="para">Here, <code class="code-voice">AudioSample</code> is defined as an alias for <code class="code-voice">UInt16</code>. Because it is an alias, the call to <code class="code-voice">AudioSample.min</code> actually calls <code class="code-voice">UInt16.min</code>, which provides an initial value of <code class="code-voice">0</code> for the <code class="code-voice">maxAmplitudeFound</code> variable.</p>
  
</section>
<section class="section">
	<a id="TP40014097-CH5-XID_425">&#x200c;</a>
  <h3 class="section-name">Booleans</h3>
  <p class="para">Swift has a basic <em>Boolean</em> type, called <code class="code-voice">Bool</code>. Boolean values are referred to as <em>logical</em>, because they can only ever be true or false. Swift provides two Boolean constant values, <code class="code-voice">true</code> and <code class="code-voice">false</code>:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="kt">let</code> <code class="vc">orangesAreOrange</code> = <code class="vc">true</code></code></li>
          <li><code class="code-voice"><code class="kt">let</code> <code class="vc">turnipsAreDelicious</code> = <code class="vc">false</code></code></li>
      </ul>



  </div>
</section><p class="para">The types of <code class="code-voice">orangesAreOrange</code> and <code class="code-voice">turnipsAreDelicious</code> have been inferred as <code class="code-voice">Bool</code> from the fact that they were initialized with Boolean literal values. As with <code class="code-voice">Int</code> and <code class="code-voice">Double</code> above, you don‚Äôt need to declare constants or variables as <code class="code-voice">Bool</code> if you set them to <code class="code-voice">true</code> or <code class="code-voice">false</code> as soon as you create them. Type inference helps make Swift code more concise and readable when it initializes constants or variables with other values whose type is already known.</p><p class="para">Boolean values are particularly useful when you work with conditional statements such as the <code class="code-voice">if</code> statement:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="kt">if</code> <code class="vc">turnipsAreDelicious</code> {</code></li>
          <li><code class="code-voice">    <code class="vc">println</code>(<code class="s">&quot;Mmm, tasty turnips!&quot;</code>)</code></li>
          <li><code class="code-voice">} <code class="kt">else</code> {</code></li>
          <li><code class="code-voice">    <code class="vc">println</code>(<code class="s">&quot;Eww, turnips are horrible.&quot;</code>)</code></li>
          <li><code class="code-voice">}</code></li>
          <li><code class="code-voice"><code class="c">// prints &quot;Eww, turnips are horrible.&quot;</code></code></li>
      </ul>



  </div>
</section><p class="para">Conditional statements such as the <code class="code-voice">if</code> statement are covered in more detail in <a href="ControlFlow.xhtml" data-id="//apple_ref/doc/uid/TP40014097-CH9-XID_153" rel="me">Control Flow</a>.</p><p class="para">Swift‚Äôs type safety prevents non-Boolean values from being be substituted for <code class="code-voice">Bool</code>. The following example reports a compile-time error:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="kt">let</code> <code class="vc">i</code> = <code class="m">1</code></code></li>
          <li><code class="code-voice"><code class="kt">if</code> <code class="vc">i</code> {</code></li>
          <li><code class="code-voice">    <code class="c">// this example will not compile, and will report an error</code></code></li>
          <li><code class="code-voice">}</code></li>
      </ul>



  </div>
</section><p class="para">However, the alternative example below is valid:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="kt">let</code> <code class="vc">i</code> = <code class="m">1</code></code></li>
          <li><code class="code-voice"><code class="kt">if</code> <code class="vc">i</code> == <code class="m">1</code> {</code></li>
          <li><code class="code-voice">    <code class="c">// this example will compile successfully</code></code></li>
          <li><code class="code-voice">}</code></li>
      </ul>



  </div>
</section><p class="para">The result of the <code class="code-voice">i == 1</code> comparison is of type <code class="code-voice">Bool</code>, and so this second example passes the type-check. Comparisons like <code class="code-voice">i == 1</code> are discussed in <a href="BasicOperators.xhtml" data-id="//apple_ref/doc/uid/TP40014097-CH6-XID_70" rel="me">Basic Operators</a>.</p><p class="para">As with other examples of type safety in Swift, this approach avoids accidental errors and ensures that the intention of a particular section of code is always clear.</p>
  
</section>
<section class="section">
	<a id="TP40014097-CH5-XID_426">&#x200c;</a>
  <h3 class="section-name">Tuples</h3>
  <p class="para"><em>Tuples</em> group multiple values into a single compound value. The values within a tuple can be of any type and do not have to be of the same type as each other.</p><p class="para">In this example, <code class="code-voice">(404, &quot;Not Found&quot;)</code> is a tuple that describes an <em>HTTP status code</em>. An HTTP status code is a special value returned by a web server whenever you request a web page. A status code of <code class="code-voice">404 Not Found</code> is returned if you request a webpage that doesn‚Äôt exist.</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="kt">let</code> <code class="vc">http404Error</code> = (<code class="m">404</code>, <code class="s">&quot;Not Found&quot;</code>)</code></li>
          <li><code class="code-voice"><code class="c">// http404Error is of type (Int, String), and equals (404, &quot;Not Found&quot;)</code></code></li>
      </ul>



  </div>
</section><p class="para">The <code class="code-voice">(404, &quot;Not Found&quot;)</code> tuple groups together an <code class="code-voice">Int</code> and a <code class="code-voice">String</code> to give the HTTP status code two separate values: a number and a human-readable description. It can be described as ‚Äúa tuple of type <code class="code-voice">(Int, String)</code>‚Äù.</p><p class="para">You can create tuples from any permutation of types, and they can contain as many different types as you like. There‚Äôs nothing stopping you from having a tuple of type <code class="code-voice">(Int, Int, Int)</code>, or <code class="code-voice">(String, Bool)</code>, or indeed any other permutation you require.</p><p class="para">You can <em>decompose</em> a tuple‚Äôs contents into separate constants or variables, which you then access as usual:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="kt">let</code> (<code class="vc">statusCode</code>, <code class="vc">statusMessage</code>) = <code class="vc">http404Error</code></code></li>
          <li><code class="code-voice"><code class="vc">println</code>(<code class="s">&quot;The status code is </code>\(<code class="vc">statusCode</code>)<code class="s">&quot;</code>)</code></li>
          <li><code class="code-voice"><code class="c">// prints &quot;The status code is 404&quot;</code></code></li>
          <li><code class="code-voice"><code class="vc">println</code>(<code class="s">&quot;The status message is </code>\(<code class="vc">statusMessage</code>)<code class="s">&quot;</code>)</code></li>
          <li><code class="code-voice"><code class="c">// prints &quot;The status message is Not Found&quot;</code></code></li>
      </ul>



  </div>
</section><p class="para">If you only need some of the tuple‚Äôs values, ignore parts of the tuple with an underscore (<code class="code-voice">_</code>) when you decompose the tuple:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="kt">let</code> (<code class="vc">justTheStatusCode</code>, <code class="kt">_</code>) = <code class="vc">http404Error</code></code></li>
          <li><code class="code-voice"><code class="vc">println</code>(<code class="s">&quot;The status code is </code>\(<code class="vc">justTheStatusCode</code>)<code class="s">&quot;</code>)</code></li>
          <li><code class="code-voice"><code class="c">// prints &quot;The status code is 404&quot;</code></code></li>
      </ul>



  </div>
</section><p class="para">Alternatively, access the individual element values in a tuple using index numbers starting at zero:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="vc">println</code>(<code class="s">&quot;The status code is </code>\(<code class="vc">http404Error</code>.<code class="m">0</code>)<code class="s">&quot;</code>)</code></li>
          <li><code class="code-voice"><code class="c">// prints &quot;The status code is 404&quot;</code></code></li>
          <li><code class="code-voice"><code class="vc">println</code>(<code class="s">&quot;The status message is </code>\(<code class="vc">http404Error</code>.<code class="m">1</code>)<code class="s">&quot;</code>)</code></li>
          <li><code class="code-voice"><code class="c">// prints &quot;The status message is Not Found&quot;</code></code></li>
      </ul>



  </div>
</section><p class="para">You can name the individual elements in a tuple when the tuple is defined:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="kt">let</code> <code class="vc">http200Status</code> = (<code class="vc">statusCode</code>: <code class="m">200</code>, <code class="vc">description</code>: <code class="s">&quot;OK&quot;</code>)</code></li>
      </ul>



  </div>
</section><p class="para">If you name the elements in a tuple, you can use the element names to access the values of those elements:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="vc">println</code>(<code class="s">&quot;The status code is </code>\(<code class="vc">http200Status</code>.<code class="vc">statusCode</code>)<code class="s">&quot;</code>)</code></li>
          <li><code class="code-voice"><code class="c">// prints &quot;The status code is 200&quot;</code></code></li>
          <li><code class="code-voice"><code class="vc">println</code>(<code class="s">&quot;The status message is </code>\(<code class="vc">http200Status</code>.<code class="vc">description</code>)<code class="s">&quot;</code>)</code></li>
          <li><code class="code-voice"><code class="c">// prints &quot;The status message is OK&quot;</code></code></li>
      </ul>



  </div>
</section><p class="para">Tuples are particularly useful as the return values of functions. A function that tries to retrieve a web page might return the <code class="code-voice">(Int, String)</code> tuple type to describe the success or failure of the page retrieval. By returning a tuple with two distinct values, each of a different type, the function provides more useful information about its outcome than if it could only return a single value of a single type. For more information, see <a href="Functions.xhtml#TP40014097-CH10-XID_212" data-id="//apple_ref/doc/uid/TP40014097-CH10-XID_212" rel="me">Functions with Multiple Return Values</a>.</p><div class="note">
  <aside class="aside">
    	<p class="aside-title uppercase">Note</p>
    	<p class="para">Tuples are useful for temporary groups of related values. They are not suited to the creation of complex data structures. If your data structure is likely to persist beyond a temporary scope, model it as a class or structure, rather than as a tuple. For more information, see <a href="ClassesAndStructures.xhtml" data-id="//apple_ref/doc/uid/TP40014097-CH13-XID_94" rel="me">Classes and Structures</a>.
    	</p>
    
  </aside>
</div>
  
</section>
<section class="section">
	<a id="TP40014097-CH5-XID_428">&#x200c;</a>
  <h3 class="section-name">Optionals</h3>
  <p class="para">You use <em>optionals</em> in situations where a value may be absent. An optional says:</p><ul class="list-bullet">
  <li class="item"><p class="para">There <em>is</em> a value, and it equals <em>x</em></p></li>
</ul><p class="para"><em>or</em></p><ul class="list-bullet">
  <li class="item"><p class="para">There <em>isn‚Äôt</em> a value at all</p></li>
</ul><div class="note">
  <aside class="aside">
    	<p class="aside-title uppercase">Note</p>
    	<p class="para">The concept of optionals doesn‚Äôt exist in C or Objective-C. The nearest thing in Objective-C is the ability to return <code class="code-voice">nil</code> from a method that would otherwise return an object, with <code class="code-voice">nil</code> meaning ‚Äúthe absence of a valid object.‚Äù However, this only works for objects‚Äîit doesn‚Äôt work for structs, basic C types, or enumeration values. For these types, Objective-C methods typically return a special value (such as <code class="code-voice">NSNotFound</code>) to indicate the absence of a value. This approach assumes that the method‚Äôs caller knows there is a special value to test against and remembers to check for it. Swift‚Äôs optionals let you indicate the absence of a value for <em>any type at all</em>, without the need for special constants.
    	</p>
    
  </aside>
</div><p class="para">Here‚Äôs an example. Swift‚Äôs <code class="code-voice">String</code> type has a method called <code class="code-voice">toInt</code>, which tries to convert a <code class="code-voice">String</code> value into an <code class="code-voice">Int</code> value. However, not every string can be converted into an integer. The string <code class="code-voice">&quot;123&quot;</code> can be converted into the numeric value <code class="code-voice">123</code>, but the string <code class="code-voice">&quot;hello, world&quot;</code> does not have an obvious numeric value to convert to.</p><p class="para">The example below uses the <code class="code-voice">toInt</code> method to try to convert a <code class="code-voice">String</code> into an <code class="code-voice">Int</code>:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="kt">let</code> <code class="vc">possibleNumber</code> = <code class="s">&quot;123&quot;</code></code></li>
          <li><code class="code-voice"><code class="kt">let</code> <code class="vc">convertedNumber</code> = <code class="vc">possibleNumber</code>.<code class="vc">toInt</code>()</code></li>
          <li><code class="code-voice"><code class="c">// convertedNumber is inferred to be of type &quot;Int?&quot;, or &quot;optional Int&quot;</code></code></li>
      </ul>



  </div>
</section><p class="para">Because the <code class="code-voice">toInt</code> method might fail, it returns an <em>optional</em> <code class="code-voice">Int</code>, rather than an <code class="code-voice">Int</code>. An optional <code class="code-voice">Int</code> is written as <code class="code-voice">Int?</code>, not <code class="code-voice">Int</code>. The question mark indicates that the value it contains is optional, meaning that it might contain <em>some</em> <code class="code-voice">Int</code> value, or it might contain <em>no value at all</em>. (It can‚Äôt contain anything else, such as a <code class="code-voice">Bool</code> value or a <code class="code-voice">String</code> value. It‚Äôs either an <code class="code-voice">Int</code>, or it‚Äôs nothing at all.)</p>
  <section class="section">
	<a id="TP40014097-CH5-XID_430">&#x200c;</a>
  <h3 class="section-name">If Statements and Forced Unwrapping</h3>
  <p class="para">You can use an <code class="code-voice">if</code> statement to find out whether an optional contains a value. If an optional does have a value, it evaluates to <code class="code-voice">true</code>; if it has no value at all, it evaluates to <code class="code-voice">false</code>.</p><p class="para">Once you‚Äôre sure that the optional <em>does</em> contain a value, you can access its underlying value by adding an exclamation mark (<code class="code-voice">!</code>) to the end of the optional‚Äôs name. The exclamation mark effectively says, ‚ÄúI know that this optional definitely has a value; please use it.‚Äù This is known as <em>forced unwrapping</em> of the optional‚Äôs value:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="kt">if</code> <code class="vc">convertedNumber</code> {</code></li>
          <li><code class="code-voice">    <code class="vc">println</code>(<code class="s">&quot;</code>\(<code class="vc">possibleNumber</code>)<code class="s"> has an integer value of </code>\(<code class="vc">convertedNumber</code>!)<code class="s">&quot;</code>)</code></li>
          <li><code class="code-voice">} <code class="kt">else</code> {</code></li>
          <li><code class="code-voice">    <code class="vc">println</code>(<code class="s">&quot;</code>\(<code class="vc">possibleNumber</code>)<code class="s"> could not be converted to an integer&quot;</code>)</code></li>
          <li><code class="code-voice">}</code></li>
          <li><code class="code-voice"><code class="c">// prints &quot;123 has an integer value of 123&quot;</code></code></li>
      </ul>



  </div>
</section><p class="para">For more on the <code class="code-voice">if</code> statement, see <a href="ControlFlow.xhtml" data-id="//apple_ref/doc/uid/TP40014097-CH9-XID_153" rel="me">Control Flow</a>.</p><div class="note">
  <aside class="aside">
    	<p class="aside-title uppercase">Note</p>
    	<p class="para">Trying to use <code class="code-voice">!</code> to access a non-existent optional value triggers a runtime error. Always make sure that an optional contains a non-<code class="code-voice">nil</code> value before using <code class="code-voice">!</code> to force-unwrap its value.
    	</p>
    
  </aside>
</div>
  
</section>
<section class="section">
	<a id="TP40014097-CH5-XID_432">&#x200c;</a>
  <h3 class="section-name">Optional Binding</h3>
  <p class="para">You use <em>optional binding</em> to find out whether an optional contains a value, and if so, to make that value available as a temporary constant or variable. Optional binding can be used with <code class="code-voice">if</code> and <code class="code-voice">while</code> statements to check for a value inside an optional, and to extract that value into a constant or variable, as part of a single action. <code class="code-voice">if</code> and <code class="code-voice">while</code> statements are described in more detail in <a href="ControlFlow.xhtml" data-id="//apple_ref/doc/uid/TP40014097-CH9-XID_153" rel="me">Control Flow</a>.</p><p class="para">Write optional bindings for the <code class="code-voice">if</code> statement as follows:</p><span class="caption"></span>
<div class="code-outline">
  <ul class="code-outline-lines code-voice">
    <li><pre class="code-voice"><code class="kt">if</code> <code class="kt">let</code> <em class="variable-text">constantName</em> = <em class="variable-text">someOptional</em> {</pre></li><li><pre class="code-voice">    <em class="variable-text">statements</em></pre></li><li><pre class="code-voice">}</pre></li>
  </ul>
</div><p class="para">You can rewrite the <code class="code-voice">possibleNumber</code> example from above to use optional binding rather than forced unwrapping:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="kt">if</code> <code class="kt">let</code> <code class="vc">actualNumber</code> = <code class="vc">possibleNumber</code>.<code class="vc">toInt</code>() {</code></li>
          <li><code class="code-voice">    <code class="vc">println</code>(<code class="s">&quot;</code>\(<code class="vc">possibleNumber</code>)<code class="s"> has an integer value of </code>\(<code class="vc">actualNumber</code>)<code class="s">&quot;</code>)</code></li>
          <li><code class="code-voice">} <code class="kt">else</code> {</code></li>
          <li><code class="code-voice">    <code class="vc">println</code>(<code class="s">&quot;</code>\(<code class="vc">possibleNumber</code>)<code class="s"> could not be converted to an integer&quot;</code>)</code></li>
          <li><code class="code-voice">}</code></li>
          <li><code class="code-voice"><code class="c">// prints &quot;123 has an integer value of 123&quot;</code></code></li>
      </ul>



  </div>
</section><p class="para">This can be read as:</p><p class="para">‚ÄúIf the optional <code class="code-voice">Int</code> returned by <code class="code-voice">possibleNumber.toInt</code> contains a value, set a new constant called <code class="code-voice">actualNumber</code> to the value contained in the optional.‚Äù</p><p class="para">If the conversion is successful, the <code class="code-voice">actualNumber</code> constant becomes available for use within the first branch of the <code class="code-voice">if</code> statement. It has already been initialized with the value contained <em>within</em> the optional, and so there is no need to use the <code class="code-voice">!</code> suffix to access its value. In this example, <code class="code-voice">actualNumber</code> is simply used to print the result of the conversion.</p><p class="para">You can use both constants and variables with optional binding. If you wanted to manipulate the value of <code class="code-voice">actualNumber</code> within the first branch of the <code class="code-voice">if</code> statement, you could write <code class="code-voice">if var actualNumber</code> instead, and the value contained within the optional would be made available as a variable rather than a constant.</p>
  
</section>
<section class="section">
	<a id="TP40014097-CH5-XID_433">&#x200c;</a>
  <h3 class="section-name">nil</h3>
  <p class="para">You set an optional variable to a valueless state by assigning it the special value <code class="code-voice">nil</code>:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="kt">var</code> <code class="vc">serverResponseCode</code>: <code class="n"><!-- a href="" logicalPath="" -->Int<!-- /a --></code>? = <code class="m">404</code></code></li>
          <li><code class="code-voice"><code class="c">// serverResponseCode contains an actual Int value of 404</code></code></li>
          <li><code class="code-voice"><code class="vc">serverResponseCode</code> = <code class="vc">nil</code></code></li>
          <li><code class="code-voice"><code class="c">// serverResponseCode now contains no value</code></code></li>
      </ul>



  </div>
</section><div class="note">
  <aside class="aside">
    	<p class="aside-title uppercase">Note</p>
    	<p class="para"><code class="code-voice">nil</code> cannot be used with non-optional constants and variables. If a constant or variable in your code needs to be able to cope with the absence of a value under certain conditions, always declare it as an optional value of the appropriate type.
    	</p>
    
  </aside>
</div><p class="para">If you define an optional constant or variable without providing a default value, the constant or variable is automatically set to <code class="code-voice">nil</code> for you:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="kt">var</code> <code class="vc">surveyAnswer</code>: <code class="n"><!-- a href="" logicalPath="" -->String<!-- /a --></code>?</code></li>
          <li><code class="code-voice"><code class="c">// surveyAnswer is automatically set to nil</code></code></li>
      </ul>



  </div>
</section><div class="note">
  <aside class="aside">
    	<p class="aside-title uppercase">Note</p>
    	<p class="para">Swift‚Äôs <code class="code-voice">nil</code> is not the same as <code class="code-voice">nil</code> in Objective-C. In Objective-C, <code class="code-voice">nil</code> is a pointer to a non-existent object. In Swift, <code class="code-voice">nil</code> is not a pointer‚Äîit is the absence of a value of a certain type. Optionals of <em>any</em> type can be set to <code class="code-voice">nil</code>, not just object types.
    	</p>
    
  </aside>
</div>
  
</section>
<section class="section">
	<a id="TP40014097-CH5-XID_436">&#x200c;</a>
  <h3 class="section-name">Implicitly Unwrapped Optionals</h3>
  <p class="para">As described above, optionals indicate that a constant or variable is allowed to have ‚Äúno value‚Äù. Optionals can be checked with an <code class="code-voice">if</code> statement to see if a value exists, and can be conditionally unwrapped with optional binding to access the optional‚Äôs value if it does exist.</p><p class="para">Sometimes it is clear from a program‚Äôs structure that an optional will <em>always</em> have a value, after that value is first set. In these cases, it is useful to remove the need to check and unwrap the optional‚Äôs value every time it is accessed, because it can be safely assumed to have a value all of the time.</p><p class="para">These kinds of optionals are defined as <em>implicitly unwrapped optionals</em>. You write an implicitly unwrapped optional by placing an exclamation mark (<code class="code-voice">String!</code>) rather than a question mark (<code class="code-voice">String?</code>) after the type that you want to make optional.</p><p class="para">Implicitly unwrapped optionals are useful when an optional‚Äôs value is confirmed to exist immediately after the optional is first defined and can definitely be assumed to exist at every point thereafter. The primary use of implicitly unwrapped optionals in Swift is during class initialization, as described in <a href="AutomaticReferenceCounting.xhtml#TP40014097-CH20-XID_60" data-id="//apple_ref/doc/uid/TP40014097-CH20-XID_60" rel="me">Unowned References and Implicitly Unwrapped Optional Properties</a>.</p><p class="para">An implicitly unwrapped optional is a normal optional behind the scenes, but can also be used like a nonoptional value, without the need to unwrap the optional value each time it is accessed. The following example shows the difference in behavior between an optional <code class="code-voice">String</code> and an implicitly unwrapped optional <code class="code-voice">String</code>:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="kt">let</code> <code class="vc">possibleString</code>: <code class="n"><!-- a href="" logicalPath="" -->String<!-- /a --></code>? = <code class="s">&quot;An optional string.&quot;</code></code></li>
          <li><code class="code-voice"><code class="vc">println</code>(<code class="vc">possibleString</code>!) <code class="c">// requires an exclamation mark to access its value</code></code></li>
          <li><code class="code-voice"><code class="c">// prints &quot;An optional string.&quot;</code></code></li>
          <li><code class="code-voice"> </code></li>
          <li><code class="code-voice"><code class="kt">let</code> <code class="vc">assumedString</code>: <code class="n"><!-- a href="" logicalPath="" -->String<!-- /a --></code>! = <code class="s">&quot;An implicitly unwrapped optional string.&quot;</code></code></li>
          <li><code class="code-voice"><code class="vc">println</code>(<code class="vc">assumedString</code>)  <code class="c">// no exclamation mark is needed to access its value</code></code></li>
          <li><code class="code-voice"><code class="c">// prints &quot;An implicitly unwrapped optional string.&quot;</code></code></li>
      </ul>



  </div>
</section><p class="para">You can think of an implicitly unwrapped optional as giving permission for the optional to be unwrapped automatically whenever it is used. Rather than placing an exclamation mark after the optional‚Äôs name each time you use it, you place an exclamation mark after the optional‚Äôs type when you declare it.</p><div class="note">
  <aside class="aside">
    	<p class="aside-title uppercase">Note</p>
    	<p class="para">If you try to access an implicitly unwrapped optional when it does not contain a value, you will trigger a runtime error. The result is exactly the same as if you place an exclamation mark after a normal optional that does not contain a value.
    	</p>
    
  </aside>
</div><p class="para">You can still treat an implicitly unwrapped optional like a normal optional, to check if it contains a value:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="kt">if</code> <code class="vc">assumedString</code> {</code></li>
          <li><code class="code-voice">    <code class="vc">println</code>(<code class="vc">assumedString</code>)</code></li>
          <li><code class="code-voice">}</code></li>
          <li><code class="code-voice"><code class="c">// prints &quot;An implicitly unwrapped optional string.&quot;</code></code></li>
      </ul>



  </div>
</section><p class="para">You can also use an implicitly unwrapped optional with optional binding, to check and unwrap its value in a single statement:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="kt">if</code> <code class="kt">let</code> <code class="vc">definiteString</code> = <code class="vc">assumedString</code> {</code></li>
          <li><code class="code-voice">    <code class="vc">println</code>(<code class="vc">definiteString</code>)</code></li>
          <li><code class="code-voice">}</code></li>
          <li><code class="code-voice"><code class="c">// prints &quot;An implicitly unwrapped optional string.&quot;</code></code></li>
      </ul>



  </div>
</section><div class="note">
  <aside class="aside">
    	<p class="aside-title uppercase">Note</p>
    	<p class="para">Implicitly unwrapped optionals should not be used when there is a possibility of a variable becoming <code class="code-voice">nil</code> at a later point. Always use a normal optional type if you need to check for a <code class="code-voice">nil</code> value during the lifetime of a variable.
    	</p>
    
  </aside>
</div>
  
</section>

</section>
<section class="section">
	<a id="TP40014097-CH5-XID_439">&#x200c;</a>
  <h3 class="section-name">Assertions</h3>
  <p class="para">Optionals enable you to check for values that may or may not exist, and to write code that copes gracefully with the absence of a value. In some cases, however, it is simply not possible for your code to continue execution if a value does not exist, or if a provided value does not satisfy certain conditions. In these situations, you can trigger an <em>assertion</em> in your code to end code execution and to provide an opportunity to debug the cause of the absent or invalid value.</p>
  <section class="section">
	<a id="TP40014097-CH5-XID_440">&#x200c;</a>
  <h3 class="section-name">Debugging with Assertions</h3>
  <p class="para">An assertion is a runtime check that a logical condition definitely evaluates to <code class="code-voice">true</code>. Literally put, an assertion ‚Äúasserts‚Äù that a condition is true. You use an assertion to make sure that an essential condition is satisfied before executing any further code. If the condition evaluates to <code class="code-voice">true</code>, code execution continues as usual; if the condition evaluates to <code class="code-voice">false</code>, code execution ends, and your app is terminated.</p><p class="para">If your code triggers an assertion while running in a debug environment, such as when you build and run an app in Xcode, you can see exactly where the invalid state occurred and query the state of your app at the time that the assertion was triggered. An assertion also lets you provide a suitable debug message as to the nature of the assert.</p><p class="para">You write an assertion by calling the global <code class="code-voice">assert</code> function. You pass the <code class="code-voice">assert</code> function an expression that evaluates to <code class="code-voice">true</code> or <code class="code-voice">false</code> and a message that should be displayed if the result of the condition is <code class="code-voice">false</code>:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="kt">let</code> <code class="vc">age</code> = -<code class="m">3</code></code></li>
          <li><code class="code-voice"><code class="vc">assert</code>(<code class="vc">age</code> &gt;= <code class="m">0</code>, <code class="s">&quot;A person's age cannot be less than zero&quot;</code>)</code></li>
          <li><code class="code-voice"><code class="c">// this causes the assertion to trigger, because age is not &gt;= 0</code></code></li>
      </ul>



  </div>
</section><p class="para">In this example, code execution will continue only if <code class="code-voice">age &gt;= 0</code> evaluates to <code class="code-voice">true</code>, that is, if the value of <code class="code-voice">age</code> is non-negative. If the value of <code class="code-voice">age</code> <em>is</em> negative, as in the code above, then <code class="code-voice">age &gt;= 0</code> evaluates to <code class="code-voice">false</code>, and the assertion is triggered, terminating the application.</p><p class="para">Assertion messages cannot use string interpolation. The assertion message can be omitted if desired, as in the following example:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="vc">assert</code>(<code class="vc">age</code> &gt;= <code class="m">0</code>)</code></li>
      </ul>



  </div>
</section>
  
</section>
<section class="section">
	<a id="TP40014097-CH5-XID_441">&#x200c;</a>
  <h3 class="section-name">When to Use Assertions</h3>
  <p class="para">Use an assertion whenever a condition has the potential to be false, but must <em>definitely</em> be true in order for your code to continue execution. Suitable scenarios for an assertion check include:</p><ul class="list-bullet">
  <li class="item"><p class="para">An integer subscript index is passed to a custom subscript implementation, but the subscript index value could be too low or too high.</p></li><li class="item"><p class="para">A value is passed to a function, but an invalid value means that the function cannot fulfill its task.</p></li><li class="item"><p class="para">An optional value is currently <code class="code-voice">nil</code>, but a non-<code class="code-voice">nil</code> value is essential for subsequent code to execute successfully.</p></li>
</ul><p class="para">See also <a href="Subscripts.xhtml" data-id="//apple_ref/doc/uid/TP40014097-CH16-XID_393" rel="me">Subscripts</a> and <a href="Functions.xhtml" data-id="//apple_ref/doc/uid/TP40014097-CH10-XID_204" rel="me">Functions</a>.</p><div class="note">
  <aside class="aside">
    	<p class="aside-title uppercase">Note</p>
    	<p class="para">Assertions cause your app to terminate and are not a substitute for designing your code in such a way that invalid conditions are unlikely to arise. Nonetheless, in situations where invalid conditions are possible, an assertion is an effective way to ensure that such conditions are highlighted and noticed during development, before your app is published.
    	</p>
    
  </aside>
</div>
  
</section>

</section>

  </article>
</div>
    </div>
  </body>
</html>
