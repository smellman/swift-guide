<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
  	<link href="epub.css" media="all" rel="stylesheet" type="text/css" />
  	<script type="text/javascript" src="svg.js"></script>
  </head>
  <body id="conceptual_flow_with_tasks">
    <div class="content-wrapper">
      <div id="chapter_container" class='conceptualwithtasks'>
  <article class="chapter">
    <a id="TP40014097-CH7">&#x200c;</a><a id="TP40014097-CH7-XID_368">&#x200c;</a>
    <h2 class="chapter-name">Strings and Characters</h2>
      
      	<section class="section">
      		<p class="para">A <em>string</em> is an ordered collection of characters, such as <code class="code-voice">&quot;hello, world&quot;</code> or <code class="code-voice">&quot;albatross&quot;</code>. Swift strings are represented by the <code class="code-voice">String</code> type, which in turn represents a collection of values of <code class="code-voice">Character</code> type.</p><p class="para">Swift’s <code class="code-voice">String</code> and <code class="code-voice">Character</code> types provide a fast, Unicode-compliant way to work with text in your code. The syntax for string creation and manipulation is lightweight and readable, with a similar syntax to C strings. String concatenation is as simple as adding together two strings with the <code class="code-voice">+</code> operator, and string mutability is managed by choosing between a constant or a variable, just like any other value in Swift.</p><p class="para">Despite this simplicity of syntax, Swift’s <code class="code-voice">String</code> type is a fast, modern string implementation. Every string is composed of encoding-independent Unicode characters, and provides support for accessing those characters in various Unicode representations.</p><p class="para">Strings can also be used to insert constants, variables, literals, and expressions into longer strings, in a process known as string interpolation. This makes it easy to create custom string values for display, storage, and printing.</p><div class="note">
  <aside class="aside">
    	<p class="aside-title uppercase">Note</p>
    	<p class="para">Swift’s <code class="code-voice">String</code> type is bridged seamlessly to Foundation’s <code class="code-voice">NSString</code> class. If you are working with the Foundation framework in Cocoa or Cocoa Touch, the entire <code class="code-voice">NSString</code> API is available to call on any <code class="code-voice">String</code> value you create, in addition to the <code class="code-voice">String</code> features described in this chapter. You can also use a <code class="code-voice">String</code> value with any API that requires an <code class="code-voice">NSString</code> instance.
    	</p>
    <p class="para">For more information about using <code class="code-voice">String</code> with Foundation and Cocoa, see <em class="u-book"><!-- a href="" target="_self" logicalPath="//apple_ref/doc/uid/TP40014216" -->Using Swift with Cocoa and Objective-C<!-- /a --></em>.</p>
  </aside>
</div>

    		</section> 


      <section class="section">
	<a id="TP40014097-CH7-XID_370">&#x200c;</a>
  <h3 class="section-name">String Literals</h3>
  <p class="para">You can include predefined <code class="code-voice">String</code> values within your code as <em>string literals</em>. A string literal is a fixed sequence of textual characters surrounded by a pair of double quotes (<code class="code-voice">&quot;&quot;</code>).</p><p class="para">A string literal can be used to provide an initial value for a constant or variable:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="kt">let</code> <code class="vc">someString</code> = <code class="s">&quot;Some string literal value&quot;</code></code></li>
      </ul>



  </div>
</section><p class="para">Note that Swift infers a type of <code class="code-voice">String</code> for the <code class="code-voice">someString</code> constant, because it is initialized with a string literal value.</p><p class="para">String literals can include the following special characters:</p><ul class="list-bullet">
  <li class="item"><p class="para">The escaped special characters <code class="code-voice">\0</code> (null character), <code class="code-voice">\\</code> (backslash), <code class="code-voice">\t</code> (horizontal tab), <code class="code-voice">\n</code> (line feed), <code class="code-voice">\r</code> (carriage return), <code class="code-voice">\&quot;</code> (double quote) and <code class="code-voice">\&#x27;</code> (single quote)</p></li><li class="item"><p class="para">Single-byte Unicode scalars, written as <code class="code-voice">\xnn</code>, where <code class="code-voice">nn</code> is two hexadecimal digits</p></li><li class="item"><p class="para">Two-byte Unicode scalars, written as <code class="code-voice">\unnnn</code>, where <code class="code-voice">nnnn</code> is four hexadecimal digits</p></li><li class="item"><p class="para">Four-byte Unicode scalars, written as <code class="code-voice">\Unnnnnnnn</code>, where <code class="code-voice">nnnnnnnn</code> is eight hexadecimal digits</p></li>
</ul><p class="para">The code below shows an example of each kind of special character. The <code class="code-voice">wiseWords</code> constant contains two escaped double quote characters. The <code class="code-voice">dollarSign</code>, <code class="code-voice">blackHeart</code>, and <code class="code-voice">sparklingHeart</code> constants demonstrate the three different Unicode scalar character formats:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="kt">let</code> <code class="vc">wiseWords</code> = <code class="s">&quot;\&quot;Imagination is more important than knowledge\&quot; - Einstein&quot;</code></code></li>
          <li><code class="code-voice"><code class="c">// &quot;Imagination is more important than knowledge&quot; - Einstein</code></code></li>
          <li><code class="code-voice"><code class="kt">let</code> <code class="vc">dollarSign</code> = <code class="s">&quot;\x24&quot;</code>        <code class="c">// $,  Unicode scalar U+0024</code></code></li>
          <li><code class="code-voice"><code class="kt">let</code> <code class="vc">blackHeart</code> = <code class="s">&quot;\u2665&quot;</code>      <code class="c">// ♥,  Unicode scalar U+2665</code></code></li>
          <li><code class="code-voice"><code class="kt">let</code> <code class="vc">sparklingHeart</code> = <code class="s">&quot;\U0001F496&quot;</code>  <code class="c">// 💖, Unicode scalar U+1F496</code></code></li>
      </ul>



  </div>
</section>
  
</section>
<section class="section">
	<a id="TP40014097-CH7-XID_371">&#x200c;</a>
  <h3 class="section-name">Initializing an Empty String</h3>
  <p class="para">To create an empty <code class="code-voice">String</code> value as the starting point for building a longer string, either assign an empty string literal to a variable, or initialize a new <code class="code-voice">String</code> instance with initializer syntax:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="kt">var</code> <code class="vc">emptyString</code> = <code class="s">&quot;&quot;</code>               <code class="c">// empty string literal</code></code></li>
          <li><code class="code-voice"><code class="kt">var</code> <code class="vc">anotherEmptyString</code> = <code class="vc">String</code>()  <code class="c">// initializer syntax</code></code></li>
          <li><code class="code-voice"><code class="c">// these two strings are both empty, and are equivalent to each other</code></code></li>
      </ul>



  </div>
</section><p class="para">You can find out whether a <code class="code-voice">String</code> value is empty by checking its Boolean <code class="code-voice">isEmpty</code> property:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="kt">if</code> <code class="vc">emptyString</code>.<code class="vc">isEmpty</code> {</code></li>
          <li><code class="code-voice">    <code class="vc">println</code>(<code class="s">&quot;Nothing to see here&quot;</code>)</code></li>
          <li><code class="code-voice">}</code></li>
          <li><code class="code-voice"><code class="c">// prints &quot;Nothing to see here&quot;</code></code></li>
      </ul>



  </div>
</section>
  
</section>
<section class="section">
	<a id="TP40014097-CH7-XID_372">&#x200c;</a>
  <h3 class="section-name">String Mutability</h3>
  <p class="para">You indicate whether a particular <code class="code-voice">String</code> can be modified (or <em>mutated</em>) by assigning it to a variable (in which case it can be modified), or to a constant (in which case it cannot be modified):</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="kt">var</code> <code class="vc">variableString</code> = <code class="s">&quot;Horse&quot;</code></code></li>
          <li><code class="code-voice"><code class="vc">variableString</code> += <code class="s">&quot; and carriage&quot;</code></code></li>
          <li><code class="code-voice"><code class="c">// variableString is now &quot;Horse and carriage&quot;</code></code></li>
          <li><code class="code-voice"> </code></li>
          <li><code class="code-voice"><code class="kt">let</code> <code class="vc">constantString</code> = <code class="s">&quot;Highlander&quot;</code></code></li>
          <li><code class="code-voice"><code class="vc">constantString</code> += <code class="s">&quot; and another Highlander&quot;</code></code></li>
          <li><code class="code-voice"><code class="c">// this reports a compile-time error - a constant string cannot be modified</code></code></li>
      </ul>



  </div>
</section><div class="note">
  <aside class="aside">
    	<p class="aside-title uppercase">Note</p>
    	<p class="para">This approach is different from string mutation in Objective-C and Cocoa, where you choose between two classes (<code class="code-voice">NSString</code> and <code class="code-voice">NSMutableString</code>) to indicate whether a string can be mutated.
    	</p>
    
  </aside>
</div>
  
</section>
<section class="section">
	<a id="TP40014097-CH7-XID_374">&#x200c;</a>
  <h3 class="section-name">Strings Are Value Types</h3>
  <p class="para">Swift’s <code class="code-voice">String</code> type is a <em>value type</em>. If you create a new <code class="code-voice">String</code> value, that <code class="code-voice">String</code> value is <em>copied</em> when it is passed to a function or method, or when it is assigned to a constant or variable. In each case, a new copy of the existing <code class="code-voice">String</code> value is created, and the new copy is passed or assigned, not the original version. Value types are described in <a href="ClassesAndStructures.xhtml#TP40014097-CH13-XID_104" data-id="//apple_ref/doc/uid/TP40014097-CH13-XID_104" rel="me">Structures and Enumerations Are Value Types</a>.</p><div class="note">
  <aside class="aside">
    	<p class="aside-title uppercase">Note</p>
    	<p class="para">This behavior differs from that of <code class="code-voice">NSString</code> in Cocoa. When you create an <code class="code-voice">NSString</code> instance in Cocoa, and pass it to a function or method or assign it to a variable, you are always passing or assigning a <em>reference</em> to the same single <code class="code-voice">NSString</code>. No copying of the string takes place, unless you specifically request it.
    	</p>
    
  </aside>
</div><p class="para">Swift’s copy-by-default <code class="code-voice">String</code> behavior ensures that when a function or method passes you a <code class="code-voice">String</code> value, it is clear that you own that exact <code class="code-voice">String</code> value, regardless of where it came from. You can be confident that the string you are passed will not be modified unless you modify it yourself.</p><p class="para">Behind the scenes, Swift’s compiler optimizes string usage so that actual copying takes place only when absolutely necessary. This means you always get great performance when working with strings as value types.</p>
  
</section>
<section class="section">
	<a id="TP40014097-CH7-XID_376">&#x200c;</a>
  <h3 class="section-name">Working with Characters</h3>
  <p class="para">Swift’s <code class="code-voice">String</code> type represents a collection of <code class="code-voice">Character</code> values in a specified order. Each <code class="code-voice">Character</code> value represents a single Unicode character. You can access the individual <code class="code-voice">Character</code> values in a string by iterating over that string with a <code class="code-voice">for</code>-<code class="code-voice">in</code> loop:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="kt">for</code> <code class="vc">character</code> <code class="kt">in</code> <code class="s">&quot;Dog!🐶&quot;</code> {</code></li>
          <li><code class="code-voice">    <code class="vc">println</code>(<code class="vc">character</code>)</code></li>
          <li><code class="code-voice">}</code></li>
          <li><code class="code-voice"><code class="c">// D</code></code></li>
          <li><code class="code-voice"><code class="c">// o</code></code></li>
          <li><code class="code-voice"><code class="c">// g</code></code></li>
          <li><code class="code-voice"><code class="c">// !</code></code></li>
          <li><code class="code-voice"><code class="c">// 🐶</code></code></li>
      </ul>



  </div>
</section><p class="para">The <code class="code-voice">for</code>-<code class="code-voice">in</code> loop is described in <a href="ControlFlow.xhtml#TP40014097-CH9-XID_154" data-id="//apple_ref/doc/uid/TP40014097-CH9-XID_154" rel="me">For Loops</a>.</p><p class="para">Alternatively, create a stand-alone <code class="code-voice">Character</code> constant or variable from a single-character string literal by providing a <code class="code-voice">Character</code> type annotation:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="kt">let</code> <code class="vc">yenSign</code>: <code class="n"><!-- a href="" logicalPath="" -->Character<!-- /a --></code> = <code class="s">&quot;¥&quot;</code></code></li>
      </ul>



  </div>
</section>
  
</section>
<section class="section">
	<a id="TP40014097-CH7-XID_377">&#x200c;</a>
  <h3 class="section-name">Counting Characters</h3>
  <p class="para">To retrieve a count of the characters in a string, call the global <code class="code-voice">countElements</code> function and pass in a string as the function’s sole parameter:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="kt">let</code> <code class="vc">unusualMenagerie</code> = <code class="s">&quot;Koala 🐨, Snail 🐌, Penguin 🐧, Dromedary 🐪&quot;</code></code></li>
          <li><code class="code-voice"><code class="vc">println</code>(<code class="s">&quot;unusualMenagerie has </code>\(<code class="vc">countElements</code>(<code class="vc">unusualMenagerie</code>))<code class="s"> characters&quot;</code>)</code></li>
          <li><code class="code-voice"><code class="c">// prints &quot;unusualMenagerie has 40 characters&quot;</code></code></li>
      </ul>



  </div>
</section><div class="note">
  <aside class="aside">
    	<p class="aside-title uppercase">Note</p>
    	<p class="para">Different Unicode characters and different representations of the same Unicode character can require different amounts of memory to store. Because of this, characters in Swift do not each take up the same amount of memory within a string’s representation. As a result, the length of a string cannot be calculated without iterating through the string to consider each of its characters in turn. If you are working with particularly long string values, be aware that the <code class="code-voice">countElements</code> function must iterate over the characters within a string in order to calculate an accurate character count for that string.
    	</p>
    <p class="para">Note also that the character count returned by <code class="code-voice">countElements</code> is not always the same as the <code class="code-voice">length</code> property of an <code class="code-voice">NSString</code> that contains the same characters. The length of an <code class="code-voice">NSString</code> is based on the number of 16-bit code units within the string’s UTF-16 representation and not the number of Unicode characters within the string. To reflect this fact, the <code class="code-voice">length</code> property from <code class="code-voice">NSString</code> is called <code class="code-voice">utf16count</code> when it is accessed on a Swift <code class="code-voice">String</code> value.</p>
  </aside>
</div>
  
</section>
<section class="section">
	<a id="TP40014097-CH7-XID_379">&#x200c;</a>
  <h3 class="section-name">Concatenating Strings and Characters</h3>
  <p class="para"><code class="code-voice">String</code> and <code class="code-voice">Character</code> values can be added together (or <em>concatenated</em>) with the addition operator (<code class="code-voice">+</code>) to create a new <code class="code-voice">String</code> value:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="kt">let</code> <code class="vc">string1</code> = <code class="s">&quot;hello&quot;</code></code></li>
          <li><code class="code-voice"><code class="kt">let</code> <code class="vc">string2</code> = <code class="s">&quot; there&quot;</code></code></li>
          <li><code class="code-voice"><code class="kt">let</code> <code class="vc">character1</code>: <code class="n"><!-- a href="" logicalPath="" -->Character<!-- /a --></code> = <code class="s">&quot;!&quot;</code></code></li>
          <li><code class="code-voice"><code class="kt">let</code> <code class="vc">character2</code>: <code class="n"><!-- a href="" logicalPath="" -->Character<!-- /a --></code> = <code class="s">&quot;?&quot;</code></code></li>
          <li><code class="code-voice"> </code></li>
          <li><code class="code-voice"><code class="kt">let</code> <code class="vc">stringPlusCharacter</code> = <code class="vc">string1</code> + <code class="vc">character1</code>        <code class="c">// equals &quot;hello!&quot;</code></code></li>
          <li><code class="code-voice"><code class="kt">let</code> <code class="vc">stringPlusString</code> = <code class="vc">string1</code> + <code class="vc">string2</code>              <code class="c">// equals &quot;hello there&quot;</code></code></li>
          <li><code class="code-voice"><code class="kt">let</code> <code class="vc">characterPlusString</code> = <code class="vc">character1</code> + <code class="vc">string1</code>        <code class="c">// equals &quot;!hello&quot;</code></code></li>
          <li><code class="code-voice"><code class="kt">let</code> <code class="vc">characterPlusCharacter</code> = <code class="vc">character1</code> + <code class="vc">character2</code>  <code class="c">// equals &quot;!?&quot;</code></code></li>
      </ul>



  </div>
</section><p class="para">You can also append a <code class="code-voice">String</code> or <code class="code-voice">Character</code> value to an existing <code class="code-voice">String</code> variable with the addition assignment operator (<code class="code-voice">+=</code>):</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="kt">var</code> <code class="vc">instruction</code> = <code class="s">&quot;look over&quot;</code></code></li>
          <li><code class="code-voice"><code class="vc">instruction</code> += <code class="vc">string2</code></code></li>
          <li><code class="code-voice"><code class="c">// instruction now equals &quot;look over there&quot;</code></code></li>
          <li><code class="code-voice"> </code></li>
          <li><code class="code-voice"><code class="kt">var</code> <code class="vc">welcome</code> = <code class="s">&quot;good morning&quot;</code></code></li>
          <li><code class="code-voice"><code class="vc">welcome</code> += <code class="vc">character1</code></code></li>
          <li><code class="code-voice"><code class="c">// welcome now equals &quot;good morning!&quot;</code></code></li>
      </ul>



  </div>
</section><div class="note">
  <aside class="aside">
    	<p class="aside-title uppercase">Note</p>
    	<p class="para">You can’t append a <code class="code-voice">String</code> or <code class="code-voice">Character</code> to an existing <code class="code-voice">Character</code> variable, because a <code class="code-voice">Character</code> value must contain a single character only.
    	</p>
    
  </aside>
</div>
  
</section>
<section class="section">
	<a id="TP40014097-CH7-XID_381">&#x200c;</a>
  <h3 class="section-name">String Interpolation</h3>
  <p class="para"><em>String interpolation</em> is a way to construct a new <code class="code-voice">String</code> value from a mix of constants, variables, literals, and expressions by including their values inside a string literal. Each item that you insert into the string literal is wrapped in a pair of parentheses, prefixed by a backslash:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="kt">let</code> <code class="vc">multiplier</code> = <code class="m">3</code></code></li>
          <li><code class="code-voice"><code class="kt">let</code> <code class="vc">message</code> = <code class="s">&quot;</code>\(<code class="vc">multiplier</code>)<code class="s"> times 2.5 is </code>\(<code class="vc">Double</code>(<code class="vc">multiplier</code>) * <code class="m">2.5</code>)<code class="s">&quot;</code></code></li>
          <li><code class="code-voice"><code class="c">// message is &quot;3 times 2.5 is 7.5&quot;</code></code></li>
      </ul>



  </div>
</section><p class="para">In the example above, the value of <code class="code-voice">multiplier</code> is inserted into a string literal as <code class="code-voice">\(multiplier)</code>. This placeholder is replaced with the actual value of <code class="code-voice">multiplier</code> when the string interpolation is evaluated to create an actual string.</p><p class="para">The value of <code class="code-voice">multiplier</code> is also part of a larger expression later in the string. This expression calculates the value of <code class="code-voice">Double(multiplier) * 2.5</code> and inserts the result (<code class="code-voice">7.5</code>) into the string. In this case, the expression is written as <code class="code-voice">\(Double(multiplier) * 2.5)</code> when it is included inside the string literal.</p><div class="note">
  <aside class="aside">
    	<p class="aside-title uppercase">Note</p>
    	<p class="para">The expressions you write inside parentheses within an interpolated string cannot contain an unescaped double quote (<code class="code-voice">&quot;</code>) or backslash (<code class="code-voice">\</code>), and cannot contain a carriage return or line feed.
    	</p>
    
  </aside>
</div>
  
</section>
<section class="section">
	<a id="TP40014097-CH7-XID_383">&#x200c;</a>
  <h3 class="section-name">Comparing Strings</h3>
  <p class="para">Swift provides three ways to compare <code class="code-voice">String</code> values: string equality, prefix equality, and suffix equality.</p>
  <section class="section">
	<a id="TP40014097-CH7-XID_384">&#x200c;</a>
  <h3 class="section-name">String Equality</h3>
  <p class="para">Two <code class="code-voice">String</code> values are considered equal if they contain exactly the same characters in the same order:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="kt">let</code> <code class="vc">quotation</code> = <code class="s">&quot;We're a lot alike, you and I.&quot;</code></code></li>
          <li><code class="code-voice"><code class="kt">let</code> <code class="vc">sameQuotation</code> = <code class="s">&quot;We're a lot alike, you and I.&quot;</code></code></li>
          <li><code class="code-voice"><code class="kt">if</code> <code class="vc">quotation</code> == <code class="vc">sameQuotation</code> {</code></li>
          <li><code class="code-voice">    <code class="vc">println</code>(<code class="s">&quot;These two strings are considered equal&quot;</code>)</code></li>
          <li><code class="code-voice">}</code></li>
          <li><code class="code-voice"><code class="c">// prints &quot;These two strings are considered equal&quot;</code></code></li>
      </ul>



  </div>
</section>
  
</section>
<section class="section">
	<a id="TP40014097-CH7-XID_385">&#x200c;</a>
  <h3 class="section-name">Prefix and Suffix Equality</h3>
  <p class="para">To check whether a string has a particular string prefix or suffix, call the string’s <code class="code-voice">hasPrefix</code> and <code class="code-voice">hasSuffix</code> methods, both of which take a single argument of type <code class="code-voice">String</code> and return a Boolean value. Both methods perform a character-by-character comparison between the base string and the prefix or suffix string.</p><p class="para">The examples below consider an array of strings representing the scene locations from the first two acts of Shakespeare’s <em>Romeo and Juliet</em>:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="kt">let</code> <code class="vc">romeoAndJuliet</code> = [</code></li>
          <li><code class="code-voice">    <code class="s">&quot;Act 1 Scene 1: Verona, A public place&quot;</code>,</code></li>
          <li><code class="code-voice">    <code class="s">&quot;Act 1 Scene 2: Capulet's mansion&quot;</code>,</code></li>
          <li><code class="code-voice">    <code class="s">&quot;Act 1 Scene 3: A room in Capulet's mansion&quot;</code>,</code></li>
          <li><code class="code-voice">    <code class="s">&quot;Act 1 Scene 4: A street outside Capulet's mansion&quot;</code>,</code></li>
          <li><code class="code-voice">    <code class="s">&quot;Act 1 Scene 5: The Great Hall in Capulet's mansion&quot;</code>,</code></li>
          <li><code class="code-voice">    <code class="s">&quot;Act 2 Scene 1: Outside Capulet's mansion&quot;</code>,</code></li>
          <li><code class="code-voice">    <code class="s">&quot;Act 2 Scene 2: Capulet's orchard&quot;</code>,</code></li>
          <li><code class="code-voice">    <code class="s">&quot;Act 2 Scene 3: Outside Friar Lawrence's cell&quot;</code>,</code></li>
          <li><code class="code-voice">    <code class="s">&quot;Act 2 Scene 4: A street in Verona&quot;</code>,</code></li>
          <li><code class="code-voice">    <code class="s">&quot;Act 2 Scene 5: Capulet's mansion&quot;</code>,</code></li>
          <li><code class="code-voice">    <code class="s">&quot;Act 2 Scene 6: Friar Lawrence's cell&quot;</code></code></li>
          <li><code class="code-voice">]</code></li>
      </ul>



  </div>
</section><p class="para">You can use the <code class="code-voice">hasPrefix</code> method with the <code class="code-voice">romeoAndJuliet</code> array to count the number of scenes in Act 1 of the play:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="kt">var</code> <code class="vc">act1SceneCount</code> = <code class="m">0</code></code></li>
          <li><code class="code-voice"><code class="kt">for</code> <code class="vc">scene</code> <code class="kt">in</code> <code class="vc">romeoAndJuliet</code> {</code></li>
          <li><code class="code-voice">    <code class="kt">if</code> <code class="vc">scene</code>.<code class="vc">hasPrefix</code>(<code class="s">&quot;Act 1 &quot;</code>) {</code></li>
          <li><code class="code-voice">        ++<code class="vc">act1SceneCount</code></code></li>
          <li><code class="code-voice">    }</code></li>
          <li><code class="code-voice">}</code></li>
          <li><code class="code-voice"><code class="vc">println</code>(<code class="s">&quot;There are </code>\(<code class="vc">act1SceneCount</code>)<code class="s"> scenes in Act 1&quot;</code>)</code></li>
          <li><code class="code-voice"><code class="c">// prints &quot;There are 5 scenes in Act 1&quot;</code></code></li>
      </ul>



  </div>
</section><p class="para">Similarly, use the <code class="code-voice">hasSuffix</code> method to count the number of scenes that take place in or around Capulet’s mansion and Friar Lawrence’s cell:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="kt">var</code> <code class="vc">mansionCount</code> = <code class="m">0</code></code></li>
          <li><code class="code-voice"><code class="kt">var</code> <code class="vc">cellCount</code> = <code class="m">0</code></code></li>
          <li><code class="code-voice"><code class="kt">for</code> <code class="vc">scene</code> <code class="kt">in</code> <code class="vc">romeoAndJuliet</code> {</code></li>
          <li><code class="code-voice">    <code class="kt">if</code> <code class="vc">scene</code>.<code class="vc">hasSuffix</code>(<code class="s">&quot;Capulet's mansion&quot;</code>) {</code></li>
          <li><code class="code-voice">        ++<code class="vc">mansionCount</code></code></li>
          <li><code class="code-voice">    } <code class="kt">else</code> <code class="kt">if</code> <code class="vc">scene</code>.<code class="vc">hasSuffix</code>(<code class="s">&quot;Friar Lawrence's cell&quot;</code>) {</code></li>
          <li><code class="code-voice">        ++<code class="vc">cellCount</code></code></li>
          <li><code class="code-voice">    }</code></li>
          <li><code class="code-voice">}</code></li>
          <li><code class="code-voice"><code class="vc">println</code>(<code class="s">&quot;</code>\(<code class="vc">mansionCount</code>)<code class="s"> mansion scenes; </code>\(<code class="vc">cellCount</code>)<code class="s"> cell scenes&quot;</code>)</code></li>
          <li><code class="code-voice"><code class="c">// prints &quot;6 mansion scenes; 2 cell scenes&quot;</code></code></li>
      </ul>



  </div>
</section>
  
</section>

</section>
<section class="section">
	<a id="TP40014097-CH7-XID_386">&#x200c;</a>
  <h3 class="section-name">Uppercase and Lowercase Strings</h3>
  <p class="para">You can access an uppercase or lowercase version of a string with its <code class="code-voice">uppercaseString</code> and <code class="code-voice">lowercaseString</code> properties:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="kt">let</code> <code class="vc">normal</code> = <code class="s">&quot;Could you help me, please?&quot;</code></code></li>
          <li><code class="code-voice"><code class="kt">let</code> <code class="vc">shouty</code> = <code class="vc">normal</code>.<code class="vc">uppercaseString</code></code></li>
          <li><code class="code-voice"><code class="c">// shouty is equal to &quot;COULD YOU HELP ME, PLEASE?&quot;</code></code></li>
          <li><code class="code-voice"><code class="kt">let</code> <code class="vc">whispered</code> = <code class="vc">normal</code>.<code class="vc">lowercaseString</code></code></li>
          <li><code class="code-voice"><code class="c">// whispered is equal to &quot;could you help me, please?&quot;</code></code></li>
      </ul>



  </div>
</section>
  
</section>
<section class="section">
	<a id="TP40014097-CH7-XID_387">&#x200c;</a>
  <h3 class="section-name">Unicode</h3>
  <p class="para"><em>Unicode</em> is an international standard for encoding and representing text. It enables you to represent almost any character from any language in a standardized form, and to read and write those characters to and from an external source such as a text file or web page.</p><p class="para">Swift’s <code class="code-voice">String</code> and <code class="code-voice">Character</code> types are fully Unicode-compliant. They support a number of different Unicode encodings, as described below.</p>
  <section class="section">
	<a id="TP40014097-CH7-XID_388">&#x200c;</a>
  <h3 class="section-name">Unicode Terminology</h3>
  <p class="para">Every character in Unicode can be represented by one or more <em>unicode scalars</em>. A unicode scalar is a unique 21-bit number (and name) for a character or modifier, such as <code class="code-voice">U+0061</code> for <code class="code-voice">LOWERCASE LATIN LETTER A</code> (<code class="code-voice">&quot;a&quot;</code>), or <code class="code-voice">U+1F425</code> for <code class="code-voice">FRONT-FACING BABY CHICK</code> (<code class="code-voice">&quot;🐥&quot;</code>).</p><p class="para">When a Unicode string is written to a text file or some other storage, these unicode scalars are encoded in one of several Unicode-defined formats. Each format encodes the string in small chunks known as <em>code units</em>. These include the UTF-8 format (which encodes a string as 8-bit code units) and the UTF-16 format (which encodes a string as 16-bit code units).</p>
  
</section>
<section class="section">
	<a id="TP40014097-CH7-XID_389">&#x200c;</a>
  <h3 class="section-name">Unicode Representations of Strings</h3>
  <p class="para">Swift provides several different ways to access Unicode representations of strings.</p><p class="para">You can iterate over the string with a <code class="code-voice">for</code>-<code class="code-voice">in</code> statement, to access its individual <code class="code-voice">Character</code> values as Unicode characters. This process is described in <a href="StringsAndCharacters.xhtml#TP40014097-CH7-XID_376" data-id="//apple_ref/doc/uid/TP40014097-CH7-XID_376" rel="me">Working with Characters</a>.</p><p class="para">Alternatively, access a <code class="code-voice">String</code> value in one of three other Unicode-compliant representations:</p><ul class="list-bullet">
  <li class="item"><p class="para">A collection of UTF-8 code units (accessed with the string’s <code class="code-voice">utf8</code> property)</p></li><li class="item"><p class="para">A collection of UTF-16 code units (accessed with the string’s <code class="code-voice">utf16</code> property)</p></li><li class="item"><p class="para">A collection of 21-bit Unicode scalar values (accessed with the string’s <code class="code-voice">unicodeScalars</code> property)</p></li>
</ul><p class="para">Each example below shows a different representation of the following string, which is made up of the characters <code class="code-voice">D</code>, <code class="code-voice">o</code>, <code class="code-voice">g</code>, <code class="code-voice">!</code>, and the 🐶 character (<code class="code-voice">DOG FACE</code>, or Unicode scalar <code class="code-voice">U+1F436</code>):</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="kt">let</code> <code class="vc">dogString</code> = <code class="s">&quot;Dog!🐶&quot;</code></code></li>
      </ul>



  </div>
</section>
  <section class="section">
	<a id="TP40014097-CH7-XID_390">&#x200c;</a>
  <h3 class="section-name">UTF-8</h3>
  <p class="para">You can access a UTF-8 representation of a <code class="code-voice">String</code> by iterating over its <code class="code-voice">utf8</code> property. This property is of type <code class="code-voice">UTF8View</code>, which is a collection of unsigned 8-bit (<code class="code-voice">UInt8</code>) values, one for each byte in the string’s UTF-8 representation:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="kt">for</code> <code class="vc">codeUnit</code> <code class="kt">in</code> <code class="vc">dogString</code>.<code class="vc">utf8</code> {</code></li>
          <li><code class="code-voice">    <code class="vc">print</code>(<code class="s">&quot;</code>\(<code class="vc">codeUnit</code>)<code class="s"> &quot;</code>)</code></li>
          <li><code class="code-voice">}</code></li>
          <li><code class="code-voice"><code class="vc">print</code>(<code class="s">&quot;\n&quot;</code>)</code></li>
          <li><code class="code-voice"><code class="c">// 68 111 103 33 240 159 144 182</code></code></li>
      </ul>



  </div>
</section><p class="para">In the example above, the first four decimal <code class="code-voice">codeUnit</code> values (<code class="code-voice">68</code>, <code class="code-voice">111</code>, <code class="code-voice">103</code>, <code class="code-voice">33</code>) represent the characters <code class="code-voice">D</code>, <code class="code-voice">o</code>, <code class="code-voice">g</code>, and <code class="code-voice">!</code>, whose UTF-8 representation is the same as their ASCII representation. The last four <code class="code-voice">codeUnit</code> values (<code class="code-voice">240</code>, <code class="code-voice">159</code>, <code class="code-voice">144</code>, <code class="code-voice">182</code>) are a four-byte UTF-8 representation of the <code class="code-voice">DOG FACE</code> character.</p>
  
</section>
<section class="section">
	<a id="TP40014097-CH7-XID_391">&#x200c;</a>
  <h3 class="section-name">UTF-16</h3>
  <p class="para">You can access a UTF-16 representation of a <code class="code-voice">String</code> by iterating over its <code class="code-voice">utf16</code> property. This property is of type <code class="code-voice">UTF16View</code>, which is a collection of unsigned 16-bit (<code class="code-voice">UInt16</code>) values, one for each 16-bit code unit in the string’s UTF-16 representation:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="kt">for</code> <code class="vc">codeUnit</code> <code class="kt">in</code> <code class="vc">dogString</code>.<code class="vc">utf16</code> {</code></li>
          <li><code class="code-voice">    <code class="vc">print</code>(<code class="s">&quot;</code>\(<code class="vc">codeUnit</code>)<code class="s"> &quot;</code>)</code></li>
          <li><code class="code-voice">}</code></li>
          <li><code class="code-voice"><code class="vc">print</code>(<code class="s">&quot;\n&quot;</code>)</code></li>
          <li><code class="code-voice"><code class="c">// 68 111 103 33 55357 56374</code></code></li>
      </ul>



  </div>
</section><p class="para">Again, the first four <code class="code-voice">codeUnit</code> values (<code class="code-voice">68</code>, <code class="code-voice">111</code>, <code class="code-voice">103</code>, <code class="code-voice">33</code>) represent the characters <code class="code-voice">D</code>, <code class="code-voice">o</code>, <code class="code-voice">g</code>, and <code class="code-voice">!</code>, whose UTF-16 code units have the same values as in the string’s UTF-8 representation.</p><p class="para">The fifth and sixth <code class="code-voice">codeUnit</code> values (<code class="code-voice">55357</code> and <code class="code-voice">56374</code>) are a UTF-16 surrogate pair representation of the <code class="code-voice">DOG FACE</code> character. These values are a lead surrogate value of <code class="code-voice">U+D83D</code> (decimal value <code class="code-voice">55357</code>) and a trail surrogate value of <code class="code-voice">U+DC36</code> (decimal value <code class="code-voice">56374</code>).</p>
  
</section>
<section class="section">
	<a id="TP40014097-CH7-XID_392">&#x200c;</a>
  <h3 class="section-name">Unicode Scalars</h3>
  <p class="para">You can access a Unicode scalar representation of a <code class="code-voice">String</code> value by iterating over its <code class="code-voice">unicodeScalars</code> property. This property is of type <code class="code-voice">UnicodeScalarView</code>, which is a collection of values of type <code class="code-voice">UnicodeScalar</code>. A Unicode scalar is any 21-bit Unicode code point that is not a lead surrogate or trail surrogate code point.</p><p class="para">Each <code class="code-voice">UnicodeScalar</code> has a <code class="code-voice">value</code> property that returns the scalar’s 21-bit value, represented within a <code class="code-voice">UInt32</code> value:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="kt">for</code> <code class="vc">scalar</code> <code class="kt">in</code> <code class="vc">dogString</code>.<code class="vc">unicodeScalars</code> {</code></li>
          <li><code class="code-voice">    <code class="vc">print</code>(<code class="s">&quot;</code>\(<code class="vc">scalar</code>.<code class="vc">value</code>)<code class="s"> &quot;</code>)</code></li>
          <li><code class="code-voice">}</code></li>
          <li><code class="code-voice"><code class="vc">print</code>(<code class="s">&quot;\n&quot;</code>)</code></li>
          <li><code class="code-voice"><code class="c">// 68 111 103 33 128054</code></code></li>
      </ul>



  </div>
</section><p class="para">The <code class="code-voice">value</code> properties for the first four <code class="code-voice">UnicodeScalar</code> values (<code class="code-voice">68</code>, <code class="code-voice">111</code>, <code class="code-voice">103</code>, <code class="code-voice">33</code>) once again represent the characters <code class="code-voice">D</code>, <code class="code-voice">o</code>, <code class="code-voice">g</code>, and <code class="code-voice">!</code>. The <code class="code-voice">value</code> property of the fifth and final <code class="code-voice">UnicodeScalar</code>, <code class="code-voice">128054</code>, is a decimal equivalent of the hexadecimal value <code class="code-voice">1F436</code>, which is equivalent to the Unicode scalar <code class="code-voice">U+1F436</code> for the <code class="code-voice">DOG FACE</code> character.</p><p class="para">As an alternative to querying their <code class="code-voice">value</code> properties, each <code class="code-voice">UnicodeScalar</code> value can also be used to construct a new <code class="code-voice">String</code> value, such as with string interpolation:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="kt">for</code> <code class="vc">scalar</code> <code class="kt">in</code> <code class="vc">dogString</code>.<code class="vc">unicodeScalars</code> {</code></li>
          <li><code class="code-voice">    <code class="vc">println</code>(<code class="s">&quot;</code>\(<code class="vc">scalar</code>)<code class="s"> &quot;</code>)</code></li>
          <li><code class="code-voice">}</code></li>
          <li><code class="code-voice"><code class="c">// D</code></code></li>
          <li><code class="code-voice"><code class="c">// o</code></code></li>
          <li><code class="code-voice"><code class="c">// g</code></code></li>
          <li><code class="code-voice"><code class="c">// !</code></code></li>
          <li><code class="code-voice"><code class="c">// 🐶</code></code></li>
      </ul>



  </div>
</section>
  
</section>

</section>

</section>

  </article>
</div>
    </div>
  </body>
</html>
