<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
  	<link href="epub.css" media="all" rel="stylesheet" type="text/css" />
  	<script type="text/javascript" src="svg.js"></script>
  </head>
  <body id="conceptual_flow_with_tasks">
    <div class="content-wrapper">
      <div id="chapter_container" class='conceptualwithtasks'>
  <article class="chapter">
    <a id="TP40014097-CH32">&#x200c;</a><a id="TP40014097-CH32-XID_655">&#x200c;</a>
    <h2 class="chapter-name">Expressions</h2>
      
      	<section class="section">
      		<p class="para">In Swift, there are four kinds of expressions: prefix expressions, binary expressions, primary expressions, and postfix expressions. Evaluating an expression returns a value, causes a side effect, or both.</p><p class="para">Prefix and binary expressions let you apply operators to smaller expressions. Primary expressions are conceptually the simplest kind of expression, and they provide a way to access values. Postfix expressions, like prefix and binary expressions, let you build up more complex expressions using postfixes such as function calls and member access. Each kind of expression is described in detail in the sections below.</p><div class="syntax-defs">
  <p class="syntax-defs-name">
  Grammar of an expression
</p><div class="syntax-defs-group">
  <p class="syntax-def">
  <a id="expression">&#x200c;</a>
  <span class="syntax-def-name">
  expression
</span>
<span class="arrow">
  →
</span><span class="syntactic-cat"><a href="Expressions.xhtml#prefix-expression" data-id="//apple_ref/swift/grammar/prefix-expression" rel="me">prefix-expression</a></span><span class="optional"><span class="syntactic-cat"><a href="Expressions.xhtml#binary-expressions" data-id="//apple_ref/swift/grammar/binary-expressions" rel="me">binary-expressions</a></span><sub class="subscript">opt</sub></span>
</p><p class="syntax-def">
  <a id="expression-list">&#x200c;</a>
  <span class="syntax-def-name">
  expression-list
</span>
<span class="arrow">
  →
</span><span class="alternative">
  <span class="syntactic-cat"><a href="Expressions.xhtml#expression" data-id="//apple_ref/swift/grammar/expression" rel="me">expression</a></span>
</span><span class="alternative">
  <span class="syntactic-cat"><a href="Expressions.xhtml#expression" data-id="//apple_ref/swift/grammar/expression" rel="me">expression</a></span><code class="literal">,</code><span class="syntactic-cat"><a href="Expressions.xhtml#expression-list" data-id="//apple_ref/swift/grammar/expression-list" rel="me">expression-list</a></span>
</span>
</p>
</div>
 </div>
    		</section> 


      <section class="section">
	<a id="TP40014097-CH32-XID_659">&#x200c;</a>
  <h3 class="section-name">Prefix Expressions</h3>
  <p class="para"><em>Prefix expressions</em> combine an optional prefix operator with an expression. Prefix operators take one argument, the expression that follows them.</p><p class="para">The Swift standard library provides the following prefix operators:</p><ul class="list-bullet">
  <li class="item"><p class="para"><code class="code-voice">++</code> Increment</p></li><li class="item"><p class="para"><code class="code-voice">--</code> Decrement</p></li><li class="item"><p class="para"><code class="code-voice">!</code> Logical NOT</p></li><li class="item"><p class="para"><code class="code-voice">~</code> Bitwise NOT</p></li><li class="item"><p class="para"><code class="code-voice">+</code> Unary plus</p></li><li class="item"><p class="para"><code class="code-voice">-</code> Unary minus</p></li>
</ul><p class="para">For information about the behavior of these operators, see <a href="BasicOperators.xhtml" data-id="//apple_ref/doc/uid/TP40014097-CH6-XID_70" rel="me">Basic Operators</a> and <a href="AdvancedOperators.xhtml" data-id="//apple_ref/doc/uid/TP40014097-CH27-XID_28" rel="me">Advanced Operators</a>.</p><p class="para">In addition to the standard library operators listed above, you use <code class="code-voice">&amp;</code> immediately before the name of a variable that’s being passed as an in-out argument to a function call expression. For more information and to see an example, see <a href="Functions.xhtml#TP40014097-CH10-XID_226" data-id="//apple_ref/doc/uid/TP40014097-CH10-XID_226" rel="me">In-Out Parameters</a>.</p><div class="syntax-defs">
  <p class="syntax-defs-name">
  Grammar of a prefix expression
</p><div class="syntax-defs-group">
  <p class="syntax-def">
  <a id="prefix-expression">&#x200c;</a>
  <span class="syntax-def-name">
  prefix-expression
</span>
<span class="arrow">
  →
</span><span class="optional"><span class="syntactic-cat"><a href="LexicalStructure.xhtml#prefix-operator" data-id="//apple_ref/swift/grammar/prefix-operator" rel="me">prefix-operator</a></span><sub class="subscript">opt</sub></span><span class="syntactic-cat"><a href="Expressions.xhtml#postfix-expression" data-id="//apple_ref/swift/grammar/postfix-expression" rel="me">postfix-expression</a></span>
</p><p class="syntax-def">
  <a id="TP40014097-CH32-XID_662">&#x200c;</a>
  <span class="syntax-def-name">
  prefix-expression
</span>
<span class="arrow">
  →
</span><span class="syntactic-cat"><a href="Expressions.xhtml#in-out-expression" data-id="//apple_ref/swift/grammar/in-out-expression" rel="me">in-out-expression</a></span>
</p><p class="syntax-def">
  <a id="in-out-expression">&#x200c;</a>
  <span class="syntax-def-name">
  in-out-expression
</span>
<span class="arrow">
  →
</span><code class="literal">&amp;</code><span class="syntactic-cat"><a href="LexicalStructure.xhtml#identifier" data-id="//apple_ref/swift/grammar/identifier" rel="me">identifier</a></span>
</p>
</div>
 </div>
  
</section>
<section class="section">
	<a id="TP40014097-CH32-XID_664">&#x200c;</a>
  <h3 class="section-name">Binary Expressions</h3>
  <p class="para"><em>Binary expressions</em> combine an infix binary operator with the expression that it takes as its left-hand and right-hand arguments. It has the following form:</p><span class="caption"></span>
<div class="code-outline">
  <ul class="code-outline-lines code-voice">
    <li><pre class="code-voice"><em class="variable-text">left-hand argument</em> <em class="variable-text">operator</em> <em class="variable-text">right-hand argument</em></pre></li>
  </ul>
</div><p class="para">The Swift standard library provides the following binary operators:</p><ul class="list-bullet">
  <li class="item"><dl class="term-definition termdef">
	<dt class="term">Exponentiative (No associativity, precedence level 160)</dt><dd class='definition'><ul class="list-bullet">
  <li class="item"><p class="para"><code class="code-voice">&lt;&lt;</code> Bitwise left shift</p></li><li class="item"><p class="para"><code class="code-voice">&gt;&gt;</code> Bitwise right shift</p></li>
</ul></dd>
</dl></li><li class="item"><dl class="term-definition termdef">
	<dt class="term">Multiplicative (Left associative, precedence level 150)</dt><dd class='definition'><ul class="list-bullet">
  <li class="item"><p class="para"><code class="code-voice">*</code> Multiply</p></li><li class="item"><p class="para"><code class="code-voice">/</code> Divide</p></li><li class="item"><p class="para"><code class="code-voice">%</code> Remainder</p></li><li class="item"><p class="para"><code class="code-voice">&amp;*</code> Multiply, ignoring overflow</p></li><li class="item"><p class="para"><code class="code-voice">&amp;/</code> Divide, ignoring overflow</p></li><li class="item"><p class="para"><code class="code-voice">&amp;%</code> Remainder, ignoring overflow</p></li><li class="item"><p class="para"><code class="code-voice">&amp;</code> Bitwise AND</p></li>
</ul></dd>
</dl></li><li class="item"><dl class="term-definition termdef">
	<dt class="term">Additive (Left associative, precedence level 140)</dt><dd class='definition'><ul class="list-bullet">
  <li class="item"><p class="para"><code class="code-voice">+</code> Add</p></li><li class="item"><p class="para"><code class="code-voice">-</code> Subtract</p></li><li class="item"><p class="para"><code class="code-voice">&amp;+</code> Add with overflow</p></li><li class="item"><p class="para"><code class="code-voice">&amp;-</code> Subtract with overflow</p></li><li class="item"><p class="para"><code class="code-voice">|</code> Bitwise OR</p></li><li class="item"><p class="para"><code class="code-voice">^</code> Bitwise XOR</p></li>
</ul></dd>
</dl></li><li class="item"><dl class="term-definition termdef">
	<dt class="term">Range (No associativity, precedence level 135)</dt><dd class='definition'><ul class="list-bullet">
  <li class="item"><p class="para"><code class="code-voice">..</code> Half-closed range</p></li><li class="item"><p class="para"><code class="code-voice">...</code> Closed range</p></li>
</ul></dd>
</dl></li><li class="item"><dl class="term-definition termdef">
	<dt class="term">Cast (No associativity, precedence level 132)</dt><dd class='definition'><ul class="list-bullet">
  <li class="item"><p class="para"><code class="code-voice">is</code> Type check</p></li><li class="item"><p class="para"><code class="code-voice">as</code> Type cast</p></li>
</ul></dd>
</dl></li><li class="item"><dl class="term-definition termdef">
	<dt class="term">Comparative (No associativity, precedence level 130)</dt><dd class='definition'><ul class="list-bullet">
  <li class="item"><p class="para"><code class="code-voice">&lt;</code> Less than</p></li><li class="item"><p class="para"><code class="code-voice">&lt;=</code> Less than or equal</p></li><li class="item"><p class="para"><code class="code-voice">&gt;</code> Greater than</p></li><li class="item"><p class="para"><code class="code-voice">&gt;=</code> Greater than or equal</p></li><li class="item"><p class="para"><code class="code-voice">==</code> Equal</p></li><li class="item"><p class="para"><code class="code-voice">!=</code> Not equal</p></li><li class="item"><p class="para"><code class="code-voice">===</code> Identical</p></li><li class="item"><p class="para"><code class="code-voice">!==</code> Not identical</p></li><li class="item"><p class="para"><code class="code-voice">~=</code> Pattern match</p></li>
</ul></dd>
</dl></li><li class="item"><dl class="term-definition termdef">
	<dt class="term">Conjunctive (Left associative, precedence level 120)</dt><dd class='definition'><ul class="list-bullet">
  <li class="item"><p class="para"><code class="code-voice">&amp;&amp;</code> Logical AND</p></li>
</ul></dd>
</dl></li><li class="item"><dl class="term-definition termdef">
	<dt class="term">Disjunctive (Left associative, precedence level 110)</dt><dd class='definition'><ul class="list-bullet">
  <li class="item"><p class="para"><code class="code-voice">||</code> Logical OR</p></li>
</ul></dd>
</dl></li><li class="item"><dl class="term-definition termdef">
	<dt class="term">Ternary Conditional (Right associative, precedence level 100)</dt><dd class='definition'><ul class="list-bullet">
  <li class="item"><p class="para"><code class="code-voice">?</code><code class="code-voice">:</code> Ternary conditional</p></li>
</ul></dd>
</dl></li><li class="item"><dl class="term-definition termdef">
	<dt class="term">Assignment (Right associative, precedence level 90)</dt><dd class='definition'><ul class="list-bullet">
  <li class="item"><p class="para"><code class="code-voice">=</code> Assign</p></li><li class="item"><p class="para"><code class="code-voice">*=</code> Multiply and assign</p></li><li class="item"><p class="para"><code class="code-voice">/=</code> Divide and assign</p></li><li class="item"><p class="para"><code class="code-voice">%=</code> Remainder and assign</p></li><li class="item"><p class="para"><code class="code-voice">+=</code> Add and assign</p></li><li class="item"><p class="para"><code class="code-voice">-=</code> Subtract and assign</p></li><li class="item"><p class="para"><code class="code-voice">&lt;&lt;=</code> Left bit shift and assign</p></li><li class="item"><p class="para"><code class="code-voice">&gt;&gt;=</code> Right bit shift and assign</p></li><li class="item"><p class="para"><code class="code-voice">&amp;=</code> Bitwise AND and assign</p></li><li class="item"><p class="para"><code class="code-voice">^=</code> Bitwise XOR and assign</p></li><li class="item"><p class="para"><code class="code-voice">|=</code> Bitwise OR and assign</p></li><li class="item"><p class="para"><code class="code-voice">&amp;&amp;=</code> Logical AND and assign</p></li><li class="item"><p class="para"><code class="code-voice">||=</code> Logical OR and assign</p></li>
</ul></dd>
</dl></li>
</ul><p class="para">For information about the behavior of these operators, see <a href="BasicOperators.xhtml" data-id="//apple_ref/doc/uid/TP40014097-CH6-XID_70" rel="me">Basic Operators</a> and <a href="AdvancedOperators.xhtml" data-id="//apple_ref/doc/uid/TP40014097-CH27-XID_28" rel="me">Advanced Operators</a>.</p><div class="note">
  <aside class="aside">
    	<p class="aside-title uppercase">Note</p>
    	<p class="para">At parse time, an expression made up of binary operators is represented as a flat list. This list is transformed into a tree by applying operator precedence For example, the expression <code class="code-voice">2 + 3 * 5</code> is initially understood as a flat list of five items, <code class="code-voice">2</code>, <code class="code-voice">+</code>, `` 3``, <code class="code-voice">*</code>, and <code class="code-voice">5</code>. This process transforms it into the tree (2 + (3 * 5)).
    	</p>
    
  </aside>
</div><div class="syntax-defs">
  <p class="syntax-defs-name">
  Grammar of a binary expression
</p><div class="syntax-defs-group">
  <p class="syntax-def">
  <a id="binary-expression">&#x200c;</a>
  <span class="syntax-def-name">
  binary-expression
</span>
<span class="arrow">
  →
</span><span class="syntactic-cat"><a href="LexicalStructure.xhtml#binary-operator" data-id="//apple_ref/swift/grammar/binary-operator" rel="me">binary-operator</a></span><span class="syntactic-cat"><a href="Expressions.xhtml#prefix-expression" data-id="//apple_ref/swift/grammar/prefix-expression" rel="me">prefix-expression</a></span>
</p><p class="syntax-def">
  <a id="TP40014097-CH32-XID_668">&#x200c;</a>
  <span class="syntax-def-name">
  binary-expression
</span>
<span class="arrow">
  →
</span><span class="syntactic-cat"><a href="Expressions.xhtml#assignment-operator" data-id="//apple_ref/swift/grammar/assignment-operator" rel="me">assignment-operator</a></span><span class="syntactic-cat"><a href="Expressions.xhtml#prefix-expression" data-id="//apple_ref/swift/grammar/prefix-expression" rel="me">prefix-expression</a></span>
</p><p class="syntax-def">
  <a id="TP40014097-CH32-XID_669">&#x200c;</a>
  <span class="syntax-def-name">
  binary-expression
</span>
<span class="arrow">
  →
</span><span class="syntactic-cat"><a href="Expressions.xhtml#conditional-operator" data-id="//apple_ref/swift/grammar/conditional-operator" rel="me">conditional-operator</a></span><span class="syntactic-cat"><a href="Expressions.xhtml#prefix-expression" data-id="//apple_ref/swift/grammar/prefix-expression" rel="me">prefix-expression</a></span>
</p><p class="syntax-def">
  <a id="TP40014097-CH32-XID_670">&#x200c;</a>
  <span class="syntax-def-name">
  binary-expression
</span>
<span class="arrow">
  →
</span><span class="syntactic-cat"><a href="Expressions.xhtml#type-casting-operator" data-id="//apple_ref/swift/grammar/type-casting-operator" rel="me">type-casting-operator</a></span>
</p><p class="syntax-def">
  <a id="binary-expressions">&#x200c;</a>
  <span class="syntax-def-name">
  binary-expressions
</span>
<span class="arrow">
  →
</span><span class="syntactic-cat"><a href="Expressions.xhtml#binary-expression" data-id="//apple_ref/swift/grammar/binary-expression" rel="me">binary-expression</a></span><span class="optional"><span class="syntactic-cat"><a href="Expressions.xhtml#binary-expressions" data-id="//apple_ref/swift/grammar/binary-expressions" rel="me">binary-expressions</a></span><sub class="subscript">opt</sub></span>
</p>
</div>
 </div>
  <section class="section">
	<a id="TP40014097-CH32-XID_672">&#x200c;</a>
  <h3 class="section-name">Assignment Operator</h3>
  <p class="para">The <em>assigment operator</em> sets a new value for a given expression. It has the following form:</p><span class="caption"></span>
<div class="code-outline">
  <ul class="code-outline-lines code-voice">
    <li><pre class="code-voice"><em class="variable-text">expression</em> = <em class="variable-text">value</em></pre></li>
  </ul>
</div><p class="para">The value of the <em>expression</em> is set to the value obtained by evaluating the <em>value</em>. If the <em>expression</em> is a tuple, the <em>value</em> must be a tuple with the same number of elements. (Nested tuples are allowed.) Assignment is performed from each part of the <em>value</em> to the corresponding part of the <em>expression</em>. For example:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice">(<code class="vc">a</code>, <code class="kt">_</code>, (<code class="vc">b</code>, <code class="vc">c</code>)) = (<code class="s">&quot;test&quot;</code>, <code class="m">9.45</code>, (<code class="m">12</code>, <code class="m">3</code>))</code></li>
          <li><code class="code-voice"><code class="c">// a is &quot;test&quot;, b is 12, c is 3, and 9.45 is ignored</code></code></li>
      </ul>



  </div>
</section><p class="para">The assignment operator does not return any value.</p><div class="syntax-defs">
  <p class="syntax-defs-name">
  Grammar of an assignment operator
</p><div class="syntax-defs-group">
  <p class="syntax-def">
  <a id="assignment-operator">&#x200c;</a>
  <span class="syntax-def-name">
  assignment-operator
</span>
<span class="arrow">
  →
</span><code class="literal">=</code>
</p>
</div>
 </div>
  
</section>
<section class="section">
	<a id="TP40014097-CH32-XID_675">&#x200c;</a>
  <h3 class="section-name">Ternary Conditional Operator</h3>
  <p class="para">The <em>ternary conditional operator</em> evaluates to one of two given values based on the value of a condition. It has the following form:</p><span class="caption"></span>
<div class="code-outline">
  <ul class="code-outline-lines code-voice">
    <li><pre class="code-voice"><em class="variable-text">condition</em> ? <em class="variable-text">expression used if true</em> : <em class="variable-text">expression used if false</em></pre></li>
  </ul>
</div><p class="para">If the <em>condition</em> evaluates to <code class="code-voice">true</code>, the conditional operator evaluates the first expression and returns its value. Otherwise, it evaluates the second expression and returns its value. The unused expression is not evaluated.</p><p class="para">For an example that uses the ternary conditional operator, see <a href="BasicOperators.xhtml#TP40014097-CH6-XID_84" data-id="//apple_ref/doc/uid/TP40014097-CH6-XID_84" rel="me">Ternary Conditional Operator</a>.</p><div class="syntax-defs">
  <p class="syntax-defs-name">
  Grammar of a conditional operator
</p><div class="syntax-defs-group">
  <p class="syntax-def">
  <a id="conditional-operator">&#x200c;</a>
  <span class="syntax-def-name">
  conditional-operator
</span>
<span class="arrow">
  →
</span><code class="literal">?</code><span class="syntactic-cat"><a href="Expressions.xhtml#expression" data-id="//apple_ref/swift/grammar/expression" rel="me">expression</a></span><code class="literal">:</code>
</p>
</div>
 </div>
  
</section>
<section class="section">
	<a id="TP40014097-CH32-XID_678">&#x200c;</a>
  <h3 class="section-name">Type-Casting Operators</h3>
  <p class="para">There are two type-casting operators, the <code class="code-voice">as</code> operator and the <code class="code-voice">is</code> operator. They have the following form:</p><span class="caption"></span>
<div class="code-outline">
  <ul class="code-outline-lines code-voice">
    <li><pre class="code-voice"><em class="variable-text">expression</em> <code class="kt">as</code> <em class="variable-text">type</em></pre></li><li><pre class="code-voice"><em class="variable-text">expression</em> <code class="kt">as</code>? <em class="variable-text">type</em></pre></li><li><pre class="code-voice"><em class="variable-text">expression</em> <code class="kt">is</code> <em class="variable-text">type</em></pre></li>
  </ul>
</div><p class="para">The <code class="code-voice">as</code> operator performs a cast of the <em>expression</em> to the specified <em>type</em>. It behaves as follows:</p><ul class="list-bullet">
  <li class="item"><p class="para">If conversion to the specified <em>type</em> is guaranteed to succeed, the value of the <em>expression</em> is returned as an instance of the specified <em>type</em>. An example is casting from a subclass to a superclass.</p></li><li class="item"><p class="para">If conversion to the specified <em>type</em> is guaranteed to fail, a compile-time error is raised.</p></li><li class="item"><p class="para">Otherwise, if it’s not known at compile time whether the conversion will succeed, the type of the cast expresion is an optional of the specified <em>type</em>. At runtime, if the cast succeeds, the value of <em>expression</em> is wrapped in an optional and returned; otherwise, the value returned is <code class="code-voice">nil</code>. An example is casting from a superclass to a subclass.</p></li>
</ul><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="kt">class</code> <code class="vc">SomeSuperType</code> {}</code></li>
          <li><code class="code-voice"><code class="kt">class</code> <code class="vc">SomeType</code>: <code class="n"><!-- a href="" logicalPath="" -->SomeSuperType<!-- /a --></code> {}</code></li>
          <li><code class="code-voice"><code class="kt">class</code> <code class="vc">SomeChildType</code>: <code class="n"><!-- a href="" logicalPath="" -->SomeType<!-- /a --></code> {}</code></li>
          <li><code class="code-voice"><code class="kt">let</code> <code class="vc">s</code> = <code class="vc">SomeType</code>()</code></li>
          <li><code class="code-voice"> </code></li>
          <li><code class="code-voice"><code class="kt">let</code> <code class="vc">x</code> = <code class="vc">s</code> <code class="kt">as</code> <code class="n"><!-- a href="" logicalPath="" -->SomeSuperType<!-- /a --></code>  <code class="c">// known to succeed; type is SomeSuperType</code></code></li>
          <li><code class="code-voice"><code class="kt">let</code> <code class="vc">y</code> = <code class="vc">s</code> <code class="kt">as</code> <code class="n"><!-- a href="" logicalPath="" -->Int<!-- /a --></code>            <code class="c">// known to fail; compile-time error</code></code></li>
          <li><code class="code-voice"><code class="kt">let</code> <code class="vc">z</code> = <code class="vc">s</code> <code class="kt">as</code> <code class="n"><!-- a href="" logicalPath="" -->SomeChildType<!-- /a --></code>  <code class="c">// might fail at runtime; type is SomeChildType?</code></code></li>
      </ul>



  </div>
</section><p class="para">Specifying a type with <code class="code-voice">as</code> provides the same information to the compiler as a type annotation, as shown in the following example:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="kt">let</code> <code class="vc">y1</code> = <code class="vc">x</code> <code class="kt">as</code> <code class="n"><!-- a href="" logicalPath="" -->SomeType<!-- /a --></code>  <code class="c">// Type information from 'as'</code></code></li>
          <li><code class="code-voice"><code class="kt">let</code> <code class="vc">y2</code>: <code class="n"><!-- a href="" logicalPath="" -->SomeType<!-- /a --></code> = <code class="vc">x</code>    <code class="c">// Type information from an annotation</code></code></li>
      </ul>



  </div>
</section><p class="para">The <code class="code-voice">is</code> operator checks at runtime to see whether the <em>expression</em> is of the specified <em>type</em>. If so, it returns <code class="code-voice">true</code>; otherwise, it returns <code class="code-voice">false</code>.</p><p class="para">The check must not be known to be true or false at compile time. The following are invalid:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="s">&quot;hello&quot;</code> <code class="kt">is</code> <code class="n"><!-- a href="" logicalPath="" -->String<!-- /a --></code></code></li>
          <li><code class="code-voice"><code class="s">&quot;hello&quot;</code> <code class="kt">is</code> <code class="n"><!-- a href="" logicalPath="" -->Int<!-- /a --></code></code></li>
      </ul>



  </div>
</section><p class="para">For more information about type casting and to see more examples that use the type-casting operators, see <a href="TypeCasting.xhtml" data-id="//apple_ref/doc/uid/TP40014097-CH22-XID_443" rel="me">Type Casting</a>.</p><div class="syntax-defs">
  <p class="syntax-defs-name">
  Grammar of a type-casting operator
</p><div class="syntax-defs-group">
  <p class="syntax-def">
  <a id="type-casting-operator">&#x200c;</a>
  <span class="syntax-def-name">
  type-casting-operator
</span>
<span class="arrow">
  →
</span><span class="alternative">
  <code class="literal">is</code><span class="syntactic-cat"><a href="Types.xhtml#type" data-id="//apple_ref/swift/grammar/type" rel="me">type</a></span>
</span><span class="alternative">
  <code class="literal">as</code><span class="optional"><code class="literal">?</code><sub class="subscript">opt</sub></span><span class="syntactic-cat"><a href="Types.xhtml#type" data-id="//apple_ref/swift/grammar/type" rel="me">type</a></span>
</span>
</p>
</div>
 </div>
  
</section>

</section>
<section class="section">
	<a id="TP40014097-CH32-XID_681">&#x200c;</a>
  <h3 class="section-name">Primary Expressions</h3>
  <p class="para"><em>Primary expressions</em> are the most basic kind of expression. They can be used as expressions on their own, and they can be combined with other tokens to make prefix expressions, binary expressions, and postfix expressions.</p><div class="syntax-defs">
  <p class="syntax-defs-name">
  Grammar of a primary expression
</p><div class="syntax-defs-group">
  <p class="syntax-def">
  <a id="primary-expression">&#x200c;</a>
  <span class="syntax-def-name">
  primary-expression
</span>
<span class="arrow">
  →
</span><span class="syntactic-cat"><a href="LexicalStructure.xhtml#identifier" data-id="//apple_ref/swift/grammar/identifier" rel="me">identifier</a></span><span class="optional"><span class="syntactic-cat"><a href="GenericParametersAndArguments.xhtml#generic-argument-clause" data-id="//apple_ref/swift/grammar/generic-argument-clause" rel="me">generic-argument-clause</a></span><sub class="subscript">opt</sub></span>
</p><p class="syntax-def">
  <a id="TP40014097-CH32-XID_684">&#x200c;</a>
  <span class="syntax-def-name">
  primary-expression
</span>
<span class="arrow">
  →
</span><span class="syntactic-cat"><a href="Expressions.xhtml#literal-expression" data-id="//apple_ref/swift/grammar/literal-expression" rel="me">literal-expression</a></span>
</p><p class="syntax-def">
  <a id="TP40014097-CH32-XID_685">&#x200c;</a>
  <span class="syntax-def-name">
  primary-expression
</span>
<span class="arrow">
  →
</span><span class="syntactic-cat"><a href="Expressions.xhtml#self-expression" data-id="//apple_ref/swift/grammar/self-expression" rel="me">self-expression</a></span>
</p><p class="syntax-def">
  <a id="TP40014097-CH32-XID_686">&#x200c;</a>
  <span class="syntax-def-name">
  primary-expression
</span>
<span class="arrow">
  →
</span><span class="syntactic-cat"><a href="Expressions.xhtml#superclass-expression" data-id="//apple_ref/swift/grammar/superclass-expression" rel="me">superclass-expression</a></span>
</p><p class="syntax-def">
  <a id="TP40014097-CH32-XID_687">&#x200c;</a>
  <span class="syntax-def-name">
  primary-expression
</span>
<span class="arrow">
  →
</span><span class="syntactic-cat"><a href="Expressions.xhtml#closure-expression" data-id="//apple_ref/swift/grammar/closure-expression" rel="me">closure-expression</a></span>
</p><p class="syntax-def">
  <a id="TP40014097-CH32-XID_688">&#x200c;</a>
  <span class="syntax-def-name">
  primary-expression
</span>
<span class="arrow">
  →
</span><span class="syntactic-cat"><a href="Expressions.xhtml#parenthesized-expression" data-id="//apple_ref/swift/grammar/parenthesized-expression" rel="me">parenthesized-expression</a></span>
</p><p class="syntax-def">
  <a id="TP40014097-CH32-XID_689">&#x200c;</a>
  <span class="syntax-def-name">
  primary-expression
</span>
<span class="arrow">
  →
</span><span class="syntactic-cat"><a href="Expressions.xhtml#implicit-member-expression" data-id="//apple_ref/swift/grammar/implicit-member-expression" rel="me">implicit-member-expression</a></span>
</p><p class="syntax-def">
  <a id="TP40014097-CH32-XID_690">&#x200c;</a>
  <span class="syntax-def-name">
  primary-expression
</span>
<span class="arrow">
  →
</span><span class="syntactic-cat"><a href="Expressions.xhtml#wildcard-expression" data-id="//apple_ref/swift/grammar/wildcard-expression" rel="me">wildcard-expression</a></span>
</p>
</div>
 </div>
  <section class="section">
	<a id="TP40014097-CH32-XID_691">&#x200c;</a>
  <h3 class="section-name">Literal Expression</h3>
  <p class="para">A <em>literal expression</em> consists of either an ordinary literal (such as a string or a number), an array or dictionary literal, or one of the following special literals:</p><div class="tableholder">
  <!-- <table class="graybox" border="0" cellspacing="0" cellpadding="5"> -->
  <table class="graybox">
    <caption class="tablecaption"></caption>
    <thead>
        <tr>
            <th scope="col" class="TableHeading_TableRow_TableCell"><p class="para">Literal</p></th>
            <th scope="col" class="TableHeading_TableRow_TableCell"><p class="para">Type</p></th>
            <th scope="col" class="TableHeading_TableRow_TableCell"><p class="para">Value</p></th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td><p class="para"><code class="code-voice">__FILE__</code></p></td>
            <td><p class="para">String</p></td>
            <td><p class="para">The name of the file in which it appears.</p></td>
        </tr>
        <tr>
            <td><p class="para"><code class="code-voice">__LINE__</code></p></td>
            <td><p class="para">Int</p></td>
            <td><p class="para">The line number on which it appears.</p></td>
        </tr>
        <tr>
            <td><p class="para"><code class="code-voice">__COLUMN__</code></p></td>
            <td><p class="para">Int</p></td>
            <td><p class="para">The column number in which it begins.</p></td>
        </tr>
        <tr>
            <td><p class="para"><code class="code-voice">__FUNCTION__</code></p></td>
            <td><p class="para">String</p></td>
            <td><p class="para">The name of the declaration in which it appears.</p></td>
        </tr>
    </tbody>
  </table>
</div><p class="para">Inside a function, the value of <code class="code-voice">__FUNCTION__</code> is the name of that function, inside a method it is the name of that method, inside a property getter or setter it is the name of that property, inside special members like <code class="code-voice">init</code> or <code class="code-voice">subscript</code> it is the name of that keyword, and at the top level of a file it is the name of the current module.</p><p class="para">An <em>array literal</em> is an ordered collection of values. It has the following form:</p><span class="caption"></span>
<div class="code-outline">
  <ul class="code-outline-lines code-voice">
    <li><pre class="code-voice">[<em class="variable-text">value 1</em>, <em class="variable-text">value 2</em>, <em class="variable-text">...</em>]</pre></li>
  </ul>
</div><p class="para">The last expression in the array can be followed by an optional comma. An empty array literal is written as an empty pair of brackets (<code class="code-voice">[]</code>). The value of an array literal has type <code class="code-voice">T[]</code>, where <code class="code-voice">T</code> is the type of the expressions inside it. If there are expressions of multiple types, <code class="code-voice">T</code> is their closest common supertype.</p><p class="para">A <em>dictionary literal</em> is an unordered collection of key-value pairs. It has the following form:</p><span class="caption"></span>
<div class="code-outline">
  <ul class="code-outline-lines code-voice">
    <li><pre class="code-voice">[<em class="variable-text">key 1</em>: <em class="variable-text">value 1</em>, <em class="variable-text">key 2</em>: <em class="variable-text">value 2</em>, <em class="variable-text">...</em>]</pre></li>
  </ul>
</div><p class="para">The last expression in the dictionary can be followed by an optional comma. An empty dictionary literal is written as a colon inside a pair of brackets (<code class="code-voice">[:]</code>) to distinguish it from an empty array literal. The value of a dictionary literal has type <code class="code-voice">Dictionary&lt;KeyType, ValueType&gt;</code>, where <code class="code-voice">KeyType</code> is the type of its key expressions and <code class="code-voice">ValueType</code> is the type of its value expressions. If there are expressions of multiple types, <code class="code-voice">KeyType</code> and <code class="code-voice">ValueType</code> are the closest common supertype for their respective values.</p><div class="syntax-defs">
  <p class="syntax-defs-name">
  Grammar of a literal expression
</p><div class="syntax-defs-group">
  <p class="syntax-def">
  <a id="literal-expression">&#x200c;</a>
  <span class="syntax-def-name">
  literal-expression
</span>
<span class="arrow">
  →
</span><span class="syntactic-cat"><a href="LexicalStructure.xhtml#literal" data-id="//apple_ref/swift/grammar/literal" rel="me">literal</a></span>
</p><p class="syntax-def">
  <a id="TP40014097-CH32-XID_694">&#x200c;</a>
  <span class="syntax-def-name">
  literal-expression
</span>
<span class="arrow">
  →
</span><span class="alternative">
  <span class="syntactic-cat"><a href="Expressions.xhtml#array-literal" data-id="//apple_ref/swift/grammar/array-literal" rel="me">array-literal</a></span>
</span><span class="alternative">
  <span class="syntactic-cat"><a href="Expressions.xhtml#dictionary-literal" data-id="//apple_ref/swift/grammar/dictionary-literal" rel="me">dictionary-literal</a></span>
</span>
</p><p class="syntax-def">
  <a id="TP40014097-CH32-XID_695">&#x200c;</a>
  <span class="syntax-def-name">
  literal-expression
</span>
<span class="arrow">
  →
</span><span class="alternative">
  <code class="literal">__FILE__</code>
</span><span class="alternative">
  <code class="literal">__LINE__</code>
</span><span class="alternative">
  <code class="literal">__COLUMN__</code>
</span><span class="alternative">
  <code class="literal">__FUNCTION__</code>
</span>
</p>
</div><div class="syntax-defs-group">
  <p class="syntax-def">
  <a id="array-literal">&#x200c;</a>
  <span class="syntax-def-name">
  array-literal
</span>
<span class="arrow">
  →
</span><code class="literal">[</code><span class="optional"><span class="syntactic-cat"><a href="Expressions.xhtml#array-literal-items" data-id="//apple_ref/swift/grammar/array-literal-items" rel="me">array-literal-items</a></span><sub class="subscript">opt</sub></span><code class="literal">]</code>
</p><p class="syntax-def">
  <a id="array-literal-items">&#x200c;</a>
  <span class="syntax-def-name">
  array-literal-items
</span>
<span class="arrow">
  →
</span><span class="alternative">
  <span class="syntactic-cat"><a href="Expressions.xhtml#array-literal-item" data-id="//apple_ref/swift/grammar/array-literal-item" rel="me">array-literal-item</a></span><span class="optional"><code class="literal">,</code><sub class="subscript">opt</sub></span>
</span><span class="alternative">
  <span class="syntactic-cat"><a href="Expressions.xhtml#array-literal-item" data-id="//apple_ref/swift/grammar/array-literal-item" rel="me">array-literal-item</a></span><code class="literal">,</code><span class="syntactic-cat"><a href="Expressions.xhtml#array-literal-items" data-id="//apple_ref/swift/grammar/array-literal-items" rel="me">array-literal-items</a></span>
</span>
</p><p class="syntax-def">
  <a id="array-literal-item">&#x200c;</a>
  <span class="syntax-def-name">
  array-literal-item
</span>
<span class="arrow">
  →
</span><span class="syntactic-cat"><a href="Expressions.xhtml#expression" data-id="//apple_ref/swift/grammar/expression" rel="me">expression</a></span>
</p>
</div><div class="syntax-defs-group">
  <p class="syntax-def">
  <a id="dictionary-literal">&#x200c;</a>
  <span class="syntax-def-name">
  dictionary-literal
</span>
<span class="arrow">
  →
</span><span class="alternative">
  <code class="literal">[</code><span class="syntactic-cat"><a href="Expressions.xhtml#dictionary-literal-items" data-id="//apple_ref/swift/grammar/dictionary-literal-items" rel="me">dictionary-literal-items</a></span><code class="literal">]</code>
</span><span class="alternative">
  <code class="literal">[</code><code class="literal">:</code><code class="literal">]</code>
</span>
</p><p class="syntax-def">
  <a id="dictionary-literal-items">&#x200c;</a>
  <span class="syntax-def-name">
  dictionary-literal-items
</span>
<span class="arrow">
  →
</span><span class="alternative">
  <span class="syntactic-cat"><a href="Expressions.xhtml#dictionary-literal-item" data-id="//apple_ref/swift/grammar/dictionary-literal-item" rel="me">dictionary-literal-item</a></span><span class="optional"><code class="literal">,</code><sub class="subscript">opt</sub></span>
</span><span class="alternative">
  <span class="syntactic-cat"><a href="Expressions.xhtml#dictionary-literal-item" data-id="//apple_ref/swift/grammar/dictionary-literal-item" rel="me">dictionary-literal-item</a></span><code class="literal">,</code><span class="syntactic-cat"><a href="Expressions.xhtml#dictionary-literal-items" data-id="//apple_ref/swift/grammar/dictionary-literal-items" rel="me">dictionary-literal-items</a></span>
</span>
</p><p class="syntax-def">
  <a id="dictionary-literal-item">&#x200c;</a>
  <span class="syntax-def-name">
  dictionary-literal-item
</span>
<span class="arrow">
  →
</span><span class="syntactic-cat"><a href="Expressions.xhtml#expression" data-id="//apple_ref/swift/grammar/expression" rel="me">expression</a></span><code class="literal">:</code><span class="syntactic-cat"><a href="Expressions.xhtml#expression" data-id="//apple_ref/swift/grammar/expression" rel="me">expression</a></span>
</p>
</div>
 </div>
  
</section>
<section class="section">
	<a id="TP40014097-CH32-XID_702">&#x200c;</a>
  <h3 class="section-name">Self Expression</h3>
  <p class="para">The <code class="code-voice">self</code> expression is an explicit reference to the current type or instance of the type in which it occurs. It has the following forms:</p><span class="caption"></span>
<div class="code-outline">
  <ul class="code-outline-lines code-voice">
    <li><pre class="code-voice"><code class="kt">self</code></pre></li><li><pre class="code-voice"><code class="kt">self</code>.<em class="variable-text">member name</em></pre></li><li><pre class="code-voice"><code class="kt">self</code>[<em class="variable-text">subscript index</em>]</pre></li><li><pre class="code-voice"><code class="kt">self</code>(<em class="variable-text">initializer arguments</em>)</pre></li><li><pre class="code-voice"><code class="kt">self</code>.<code class="kt">init</code>(<em class="variable-text">initializer arguments</em>)</pre></li>
  </ul>
</div><p class="para">In an initializer, subscript, or instance method, <code class="code-voice">self</code> refers to the current instance of the type in which it occurs. In a static or class method, <code class="code-voice">self</code> refers to the current type in which it occurs.</p><p class="para">The <code class="code-voice">self</code> expression is used to specify scope when accessing members, providing disambiguation when there is another variable of the same name in scope, such as a function parameter. For example:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="kt">class</code> <code class="vc">SomeClass</code> {</code></li>
          <li><code class="code-voice">    <code class="kt">var</code> <code class="vc">greeting</code>: <code class="n"><!-- a href="" logicalPath="" -->String<!-- /a --></code></code></li>
          <li><code class="code-voice">    <code class="kt">init</code>(<code class="vc">greeting</code>: <code class="n"><!-- a href="" logicalPath="" -->String<!-- /a --></code>) {</code></li>
          <li><code class="code-voice">        <code class="kt">self</code>.<code class="vc">greeting</code> = <code class="vc">greeting</code></code></li>
          <li><code class="code-voice">    }</code></li>
          <li><code class="code-voice">}</code></li>
      </ul>



  </div>
</section><p class="para">In a mutating method of value type, you can assign a new instance of that value type to <code class="code-voice">self</code>. For example:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="kt">struct</code> <code class="vc">Point</code> {</code></li>
          <li><code class="code-voice">    <code class="kt">var</code> <code class="vc">x</code> = <code class="m">0.0</code>, <code class="vc">y</code> = <code class="m">0.0</code></code></li>
          <li><code class="code-voice">    <code class="kt">mutating</code> <code class="kt">func</code> <code class="vc">moveByX</code>(<code class="vc">deltaX</code>: <code class="n"><!-- a href="" logicalPath="" -->Double<!-- /a --></code>, <code class="vc">y</code> <code class="vc">deltaY</code>: <code class="n"><!-- a href="" logicalPath="" -->Double<!-- /a --></code>) {</code></li>
          <li><code class="code-voice">        <code class="kt">self</code> = <code class="vc">Point</code>(<code class="vc">x</code>: <code class="vc">x</code> + <code class="vc">deltaX</code>, <code class="vc">y</code>: <code class="vc">y</code> + <code class="vc">deltaY</code>)</code></li>
          <li><code class="code-voice">    }</code></li>
          <li><code class="code-voice">}</code></li>
      </ul>



  </div>
</section><div class="syntax-defs">
  <p class="syntax-defs-name">
  Grammar of a self expression
</p><div class="syntax-defs-group">
  <p class="syntax-def">
  <a id="self-expression">&#x200c;</a>
  <span class="syntax-def-name">
  self-expression
</span>
<span class="arrow">
  →
</span><code class="literal">self</code>
</p><p class="syntax-def">
  <a id="TP40014097-CH32-XID_705">&#x200c;</a>
  <span class="syntax-def-name">
  self-expression
</span>
<span class="arrow">
  →
</span><code class="literal">self</code><code class="literal">.</code><span class="syntactic-cat"><a href="LexicalStructure.xhtml#identifier" data-id="//apple_ref/swift/grammar/identifier" rel="me">identifier</a></span>
</p><p class="syntax-def">
  <a id="TP40014097-CH32-XID_706">&#x200c;</a>
  <span class="syntax-def-name">
  self-expression
</span>
<span class="arrow">
  →
</span><code class="literal">self</code><code class="literal">[</code><span class="syntactic-cat"><a href="Expressions.xhtml#expression" data-id="//apple_ref/swift/grammar/expression" rel="me">expression</a></span><code class="literal">]</code>
</p><p class="syntax-def">
  <a id="TP40014097-CH32-XID_707">&#x200c;</a>
  <span class="syntax-def-name">
  self-expression
</span>
<span class="arrow">
  →
</span><code class="literal">self</code><code class="literal">.</code><code class="literal">init</code>
</p>
</div>
 </div>
  
</section>
<section class="section">
	<a id="TP40014097-CH32-XID_708">&#x200c;</a>
  <h3 class="section-name">Superclass Expression</h3>
  <p class="para">A <em>superclass expression</em> lets a class interact with its superclass. It has one of the following forms:</p><span class="caption"></span>
<div class="code-outline">
  <ul class="code-outline-lines code-voice">
    <li><pre class="code-voice"><code class="kt">super</code>.<em class="variable-text">member name</em></pre></li><li><pre class="code-voice"><code class="kt">super</code>[<em class="variable-text">subscript index</em>]</pre></li><li><pre class="code-voice"><code class="kt">super</code>.<code class="kt">init</code>(<em class="variable-text">initializer arguments</em>)</pre></li>
  </ul>
</div><p class="para">The first form is used to access a member of the superclass. The second form is used to access the superclass’s subscript implementation. The third form is used to access an initializer of the superclass.</p><p class="para">Subclasses can use a superclass expression in their implementation of members, subscripting, and initializers to make use of the implementation in their superclass.</p><div class="syntax-defs">
  <p class="syntax-defs-name">
  Grammar of a superclass expression
</p><div class="syntax-defs-group">
  <p class="syntax-def">
  <a id="superclass-expression">&#x200c;</a>
  <span class="syntax-def-name">
  superclass-expression
</span>
<span class="arrow">
  →
</span><span class="alternative">
  <span class="syntactic-cat"><a href="Expressions.xhtml#superclass-method-expression" data-id="//apple_ref/swift/grammar/superclass-method-expression" rel="me">superclass-method-expression</a></span>
</span><span class="alternative">
  <span class="syntactic-cat"><a href="Expressions.xhtml#superclass-subscript-expression" data-id="//apple_ref/swift/grammar/superclass-subscript-expression" rel="me">superclass-subscript-expression</a></span>
</span><span class="alternative">
  <span class="syntactic-cat"><a href="Expressions.xhtml#superclass-initializer-expression" data-id="//apple_ref/swift/grammar/superclass-initializer-expression" rel="me">superclass-initializer-expression</a></span>
</span>
</p>
</div><div class="syntax-defs-group">
  <p class="syntax-def">
  <a id="superclass-method-expression">&#x200c;</a>
  <span class="syntax-def-name">
  superclass-method-expression
</span>
<span class="arrow">
  →
</span><code class="literal">super</code><code class="literal">.</code><span class="syntactic-cat"><a href="LexicalStructure.xhtml#identifier" data-id="//apple_ref/swift/grammar/identifier" rel="me">identifier</a></span>
</p><p class="syntax-def">
  <a id="superclass-subscript-expression">&#x200c;</a>
  <span class="syntax-def-name">
  superclass-subscript-expression
</span>
<span class="arrow">
  →
</span><code class="literal">super</code><code class="literal">[</code><span class="syntactic-cat"><a href="Expressions.xhtml#expression" data-id="//apple_ref/swift/grammar/expression" rel="me">expression</a></span><code class="literal">]</code>
</p><p class="syntax-def">
  <a id="superclass-initializer-expression">&#x200c;</a>
  <span class="syntax-def-name">
  superclass-initializer-expression
</span>
<span class="arrow">
  →
</span><code class="literal">super</code><code class="literal">.</code><code class="literal">init</code>
</p>
</div>
 </div>
  
</section>
<section class="section">
	<a id="TP40014097-CH32-XID_714">&#x200c;</a>
  <h3 class="section-name">Closure Expression</h3>
  <p class="para">A <em>closure expression</em> creates a closure, also known as a <em>lambda</em> or an <em>anonymous function</em> in other programming languages. Like function declarations, closures contain statements which they execute, and they capture values from their enclosing scope. It has the following form:</p><span class="caption"></span>
<div class="code-outline">
  <ul class="code-outline-lines code-voice">
    <li><pre class="code-voice">{ (<em class="variable-text">parameters</em>) -&gt; <em class="variable-text">return type</em> <code class="kt">in</code></pre></li><li><pre class="code-voice">    <em class="variable-text">statements</em></pre></li><li><pre class="code-voice">}</pre></li>
  </ul>
</div><p class="para">The <em>parameters</em> have the same form as the parameters in a function declaration, as described in <a href="Declarations.xhtml#TP40014097-CH34-XID_545" data-id="//apple_ref/doc/uid/TP40014097-CH34-XID_545" rel="me">Function Declaration</a>.</p><p class="para">There are several special forms that allow closures to be written more concisely:</p><ul class="list-bullet">
  <li class="item"><p class="para">A closure can omit the types of its parameters, its return type, or both. If you omit the parameter names and both types, omit the <code class="code-voice">in</code> keyword before the statements. If the omitted types can’t be inferred, a compile-time error is raised.</p></li><li class="item"><p class="para">A closure may omit names for its parameters. Its parameters are then implicitly named <code class="code-voice">$</code> followed by their position: <code class="code-voice">$0</code>, <code class="code-voice">$1</code>, <code class="code-voice">$2</code>, and so on.</p></li><li class="item"><p class="para">A closure that consists of only a single expression is understood to return the value of that expression. The contents of this expression is also considered when performing type inference on the surrounding expression.</p></li>
</ul><p class="para">The following closure expressions are equivalent:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="vc">myFunction</code> {</code></li>
          <li><code class="code-voice">    (<code class="vc">x</code>: <code class="n"><!-- a href="" logicalPath="" -->Int<!-- /a --></code>, <code class="vc">y</code>: <code class="n"><!-- a href="" logicalPath="" -->Int<!-- /a --></code>) -&gt; <code class="vc">Int</code> <code class="kt">in</code></code></li>
          <li><code class="code-voice">    <code class="kt">return</code> <code class="vc">x</code> + <code class="vc">y</code></code></li>
          <li><code class="code-voice">}</code></li>
          <li><code class="code-voice"> </code></li>
          <li><code class="code-voice"><code class="vc">myFunction</code> {</code></li>
          <li><code class="code-voice">    (<code class="vc">x</code>, <code class="vc">y</code>) <code class="kt">in</code></code></li>
          <li><code class="code-voice">    <code class="kt">return</code> <code class="vc">x</code> + <code class="vc">y</code></code></li>
          <li><code class="code-voice">}</code></li>
          <li><code class="code-voice"> </code></li>
          <li><code class="code-voice"><code class="vc">myFunction</code> { <code class="kt">return</code> <code class="vc">$0</code> + <code class="vc">$1</code> }</code></li>
          <li><code class="code-voice"> </code></li>
          <li><code class="code-voice"><code class="vc">myFunction</code> { <code class="vc">$0</code> + <code class="vc">$1</code> }</code></li>
      </ul>



  </div>
</section><p class="para">For information about passing a closure as an argument to a function, see <a href="Expressions.xhtml#TP40014097-CH32-XID_747" data-id="//apple_ref/doc/uid/TP40014097-CH32-XID_747" rel="me">Function Call Expression</a>.</p><p class="para">A closure expression can explicitly specify the values that it captures from the surrounding scope using a <em>capture list</em>. A capture list is written as a comma separated list surrounded by square brackets, before the list of parameters. If you use a capture list, you must also use the <code class="code-voice">in</code> keyword, even if you omit the parameter names, parameter types, and return type.</p><p class="para">Each entry in the capture list can be marked as <code class="code-voice">weak</code> or <code class="code-voice">unowned</code> to capture a weak or unowned reference to the value.</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="vc">myFunction</code> { <code class="vc">print</code>(<code class="kt">self</code>.<code class="vc">title</code>) }                    <code class="c">// strong capture</code></code></li>
          <li><code class="code-voice"><code class="vc">myFunction</code> { [<code class="kt">weak</code> <code class="kt">self</code>] <code class="kt">in</code> <code class="vc">print</code>(<code class="kt">self</code>!.<code class="vc">title</code>) }    <code class="c">// weak capture</code></code></li>
          <li><code class="code-voice"><code class="vc">myFunction</code> { [<code class="kt">unowned</code> <code class="kt">self</code>] <code class="kt">in</code> <code class="vc">print</code>(<code class="kt">self</code>.<code class="vc">title</code>) }  <code class="c">// unowned capture</code></code></li>
      </ul>



  </div>
</section><p class="para">You can also bind arbitrary expression to named values in the capture list. The expression is evaluated when the closure is formed, and captured with the specified strength. For example:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="c">// Weak capture of &quot;self.parent&quot; as &quot;parent&quot;</code></code></li>
          <li><code class="code-voice"><code class="vc">myFunction</code> { [<code class="kt">weak</code> <code class="vc">parent</code> = <code class="kt">self</code>.<code class="vc">parent</code>] <code class="kt">in</code> <code class="vc">print</code>(<code class="vc">parent</code>!.<code class="vc">title</code>) }</code></li>
      </ul>



  </div>
</section><p class="para">For more information and examples of closure expressions, see <a href="Closures.xhtml#TP40014097-CH11-XID_119" data-id="//apple_ref/doc/uid/TP40014097-CH11-XID_119" rel="me">Closure Expressions</a>.</p><div class="syntax-defs">
  <p class="syntax-defs-name">
  Grammar of a closure expression
</p><div class="syntax-defs-group">
  <p class="syntax-def">
  <a id="closure-expression">&#x200c;</a>
  <span class="syntax-def-name">
  closure-expression
</span>
<span class="arrow">
  →
</span><code class="literal">{</code><span class="optional"><span class="syntactic-cat"><a href="Expressions.xhtml#closure-signature" data-id="//apple_ref/swift/grammar/closure-signature" rel="me">closure-signature</a></span><sub class="subscript">opt</sub></span><span class="syntactic-cat"><a href="Statements.xhtml#statements" data-id="//apple_ref/swift/grammar/statements" rel="me">statements</a></span><code class="literal">}</code>
</p>
</div><div class="syntax-defs-group">
  <p class="syntax-def">
  <a id="closure-signature">&#x200c;</a>
  <span class="syntax-def-name">
  closure-signature
</span>
<span class="arrow">
  →
</span><span class="syntactic-cat"><a href="Declarations.xhtml#parameter-clause" data-id="//apple_ref/swift/grammar/parameter-clause" rel="me">parameter-clause</a></span><span class="optional"><span class="syntactic-cat"><a href="Declarations.xhtml#function-result" data-id="//apple_ref/swift/grammar/function-result" rel="me">function-result</a></span><sub class="subscript">opt</sub></span><code class="literal">in</code>
</p><p class="syntax-def">
  <a id="TP40014097-CH32-XID_718">&#x200c;</a>
  <span class="syntax-def-name">
  closure-signature
</span>
<span class="arrow">
  →
</span><span class="syntactic-cat"><a href="LexicalStructure.xhtml#identifier-list" data-id="//apple_ref/swift/grammar/identifier-list" rel="me">identifier-list</a></span><span class="optional"><span class="syntactic-cat"><a href="Declarations.xhtml#function-result" data-id="//apple_ref/swift/grammar/function-result" rel="me">function-result</a></span><sub class="subscript">opt</sub></span><code class="literal">in</code>
</p><p class="syntax-def">
  <a id="TP40014097-CH32-XID_719">&#x200c;</a>
  <span class="syntax-def-name">
  closure-signature
</span>
<span class="arrow">
  →
</span><span class="syntactic-cat"><a href="Expressions.xhtml#capture-list" data-id="//apple_ref/swift/grammar/capture-list" rel="me">capture-list</a></span><span class="syntactic-cat"><a href="Declarations.xhtml#parameter-clause" data-id="//apple_ref/swift/grammar/parameter-clause" rel="me">parameter-clause</a></span><span class="optional"><span class="syntactic-cat"><a href="Declarations.xhtml#function-result" data-id="//apple_ref/swift/grammar/function-result" rel="me">function-result</a></span><sub class="subscript">opt</sub></span><code class="literal">in</code>
</p><p class="syntax-def">
  <a id="TP40014097-CH32-XID_720">&#x200c;</a>
  <span class="syntax-def-name">
  closure-signature
</span>
<span class="arrow">
  →
</span><span class="syntactic-cat"><a href="Expressions.xhtml#capture-list" data-id="//apple_ref/swift/grammar/capture-list" rel="me">capture-list</a></span><span class="syntactic-cat"><a href="LexicalStructure.xhtml#identifier-list" data-id="//apple_ref/swift/grammar/identifier-list" rel="me">identifier-list</a></span><span class="optional"><span class="syntactic-cat"><a href="Declarations.xhtml#function-result" data-id="//apple_ref/swift/grammar/function-result" rel="me">function-result</a></span><sub class="subscript">opt</sub></span><code class="literal">in</code>
</p><p class="syntax-def">
  <a id="TP40014097-CH32-XID_721">&#x200c;</a>
  <span class="syntax-def-name">
  closure-signature
</span>
<span class="arrow">
  →
</span><span class="syntactic-cat"><a href="Expressions.xhtml#capture-list" data-id="//apple_ref/swift/grammar/capture-list" rel="me">capture-list</a></span><code class="literal">in</code>
</p>
</div><div class="syntax-defs-group">
  <p class="syntax-def">
  <a id="capture-list">&#x200c;</a>
  <span class="syntax-def-name">
  capture-list
</span>
<span class="arrow">
  →
</span><code class="literal">[</code><span class="syntactic-cat"><a href="Expressions.xhtml#capture-specifier" data-id="//apple_ref/swift/grammar/capture-specifier" rel="me">capture-specifier</a></span><span class="syntactic-cat"><a href="Expressions.xhtml#expression" data-id="//apple_ref/swift/grammar/expression" rel="me">expression</a></span><code class="literal">]</code>
</p><p class="syntax-def">
  <a id="capture-specifier">&#x200c;</a>
  <span class="syntax-def-name">
  capture-specifier
</span>
<span class="arrow">
  →
</span><span class="alternative">
  <code class="literal">weak</code>
</span><span class="alternative">
  <code class="literal">unowned</code>
</span><span class="alternative">
  <code class="literal">unowned(safe)</code>
</span><span class="alternative">
  <code class="literal">unowned(unsafe)</code>
</span>
</p>
</div>
 </div>
  
</section>
<section class="section">
	<a id="TP40014097-CH32-XID_724">&#x200c;</a>
  <h3 class="section-name">Implicit Member Expression</h3>
  <p class="para">An <em>implicit member expression</em> is an abbreviated way to access a member of a type, such as an enumeration case or a class method, in a context where type inference can determine the implied type. It has the following form:</p><span class="caption"></span>
<div class="code-outline">
  <ul class="code-outline-lines code-voice">
    <li><pre class="code-voice">.<em class="variable-text">member name</em></pre></li>
  </ul>
</div><p class="para">For example:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="kt">var</code> <code class="vc">x</code> = <code class="vc">MyEnumeration</code>.<code class="vc">SomeValue</code></code></li>
          <li><code class="code-voice"><code class="vc">x</code> = .<code class="vc">AnotherValue</code></code></li>
      </ul>



  </div>
</section><div class="syntax-defs">
  <p class="syntax-defs-name">
  Grammar of a implicit member expression
</p><div class="syntax-defs-group">
  <p class="syntax-def">
  <a id="implicit-member-expression">&#x200c;</a>
  <span class="syntax-def-name">
  implicit-member-expression
</span>
<span class="arrow">
  →
</span><code class="literal">.</code><span class="syntactic-cat"><a href="LexicalStructure.xhtml#identifier" data-id="//apple_ref/swift/grammar/identifier" rel="me">identifier</a></span>
</p>
</div>
 </div>
  
</section>
<section class="section">
	<a id="TP40014097-CH32-XID_727">&#x200c;</a>
  <h3 class="section-name">Parenthesized Expression</h3>
  <p class="para">A <em>parenthesized expression</em> consists of a comma-separated list of expressions surrounded by parentheses. Each expression can have an optional identifier before it, separated by a colon (<code class="code-voice">:</code>). It has the following form:</p><span class="caption"></span>
<div class="code-outline">
  <ul class="code-outline-lines code-voice">
    <li><pre class="code-voice">(<em class="variable-text">identifier 1</em>: <em class="variable-text">expression 1</em>, <em class="variable-text">identifier 2</em>: <em class="variable-text">expression 2</em>, <em class="variable-text">...</em>)</pre></li>
  </ul>
</div><p class="para">Use parenthesized expressions to create tuples and to pass arguments to a function call. If there is only one value inside the parenthesized expression, the type of the parenthesized expression is the type of that value. For example, the type of the parenthesized expression <code class="code-voice">(1)</code> is <code class="code-voice">Int</code>, not <code class="code-voice">(Int)</code>.</p><div class="syntax-defs">
  <p class="syntax-defs-name">
  Grammar of a parenthesized expression
</p><div class="syntax-defs-group">
  <p class="syntax-def">
  <a id="parenthesized-expression">&#x200c;</a>
  <span class="syntax-def-name">
  parenthesized-expression
</span>
<span class="arrow">
  →
</span><code class="literal">(</code><span class="optional"><span class="syntactic-cat"><a href="Expressions.xhtml#expression-element-list" data-id="//apple_ref/swift/grammar/expression-element-list" rel="me">expression-element-list</a></span><sub class="subscript">opt</sub></span><code class="literal">)</code>
</p><p class="syntax-def">
  <a id="expression-element-list">&#x200c;</a>
  <span class="syntax-def-name">
  expression-element-list
</span>
<span class="arrow">
  →
</span><span class="alternative">
  <span class="syntactic-cat"><a href="Expressions.xhtml#expression-element" data-id="//apple_ref/swift/grammar/expression-element" rel="me">expression-element</a></span>
</span><span class="alternative">
  <span class="syntactic-cat"><a href="Expressions.xhtml#expression-element" data-id="//apple_ref/swift/grammar/expression-element" rel="me">expression-element</a></span><code class="literal">,</code><span class="syntactic-cat"><a href="Expressions.xhtml#expression-element-list" data-id="//apple_ref/swift/grammar/expression-element-list" rel="me">expression-element-list</a></span>
</span>
</p><p class="syntax-def">
  <a id="expression-element">&#x200c;</a>
  <span class="syntax-def-name">
  expression-element
</span>
<span class="arrow">
  →
</span><span class="alternative">
  <span class="syntactic-cat"><a href="Expressions.xhtml#expression" data-id="//apple_ref/swift/grammar/expression" rel="me">expression</a></span>
</span><span class="alternative">
  <span class="syntactic-cat"><a href="LexicalStructure.xhtml#identifier" data-id="//apple_ref/swift/grammar/identifier" rel="me">identifier</a></span><code class="literal">:</code><span class="syntactic-cat"><a href="Expressions.xhtml#expression" data-id="//apple_ref/swift/grammar/expression" rel="me">expression</a></span>
</span>
</p>
</div>
 </div>
  
</section>
<section class="section">
	<a id="TP40014097-CH32-XID_732">&#x200c;</a>
  <h3 class="section-name">Wildcard Expression</h3>
  <p class="para">A <em>wildcard expression</em> is used to explicitly ignore a value during an assignment. For example, in the following assignment 10 is assigned to <code class="code-voice">x</code> and 20 is ignored:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice">(<code class="vc">x</code>, <code class="kt">_</code>) = (<code class="m">10</code>, <code class="m">20</code>)</code></li>
          <li><code class="code-voice"><code class="c">// x is 10, 20 is ignored</code></code></li>
      </ul>



  </div>
</section><div class="syntax-defs">
  <p class="syntax-defs-name">
  Grammar of a wildcard expression
</p><div class="syntax-defs-group">
  <p class="syntax-def">
  <a id="wildcard-expression">&#x200c;</a>
  <span class="syntax-def-name">
  wildcard-expression
</span>
<span class="arrow">
  →
</span><code class="literal">_</code>
</p>
</div>
 </div>
  
</section>

</section>
<section class="section">
	<a id="TP40014097-CH32-XID_735">&#x200c;</a>
  <h3 class="section-name">Postfix Expressions</h3>
  <p class="para"><em>Postfix expressions</em> are formed by applying a postfix operator or other postfix syntax to an expression. Syntactically, every primary expression is also a postfix expression.</p><p class="para">The Swift standard library provides the following postfix operators:</p><ul class="list-bullet">
  <li class="item"><p class="para"><code class="code-voice">++</code> Increment</p></li><li class="item"><p class="para"><code class="code-voice">--</code> Decrement</p></li>
</ul><p class="para">For information about the behavior of these operators, see <a href="BasicOperators.xhtml" data-id="//apple_ref/doc/uid/TP40014097-CH6-XID_70" rel="me">Basic Operators</a> and <a href="AdvancedOperators.xhtml" data-id="//apple_ref/doc/uid/TP40014097-CH27-XID_28" rel="me">Advanced Operators</a>.</p><div class="syntax-defs">
  <p class="syntax-defs-name">
  Grammar of a postfix expression
</p><div class="syntax-defs-group">
  <p class="syntax-def">
  <a id="postfix-expression">&#x200c;</a>
  <span class="syntax-def-name">
  postfix-expression
</span>
<span class="arrow">
  →
</span><span class="syntactic-cat"><a href="Expressions.xhtml#primary-expression" data-id="//apple_ref/swift/grammar/primary-expression" rel="me">primary-expression</a></span>
</p><p class="syntax-def">
  <a id="TP40014097-CH32-XID_738">&#x200c;</a>
  <span class="syntax-def-name">
  postfix-expression
</span>
<span class="arrow">
  →
</span><span class="syntactic-cat"><a href="Expressions.xhtml#postfix-expression" data-id="//apple_ref/swift/grammar/postfix-expression" rel="me">postfix-expression</a></span><span class="syntactic-cat"><a href="LexicalStructure.xhtml#postfix-operator" data-id="//apple_ref/swift/grammar/postfix-operator" rel="me">postfix-operator</a></span>
</p><p class="syntax-def">
  <a id="TP40014097-CH32-XID_739">&#x200c;</a>
  <span class="syntax-def-name">
  postfix-expression
</span>
<span class="arrow">
  →
</span><span class="syntactic-cat"><a href="Expressions.xhtml#function-call-expression" data-id="//apple_ref/swift/grammar/function-call-expression" rel="me">function-call-expression</a></span>
</p><p class="syntax-def">
  <a id="TP40014097-CH32-XID_740">&#x200c;</a>
  <span class="syntax-def-name">
  postfix-expression
</span>
<span class="arrow">
  →
</span><span class="syntactic-cat"><a href="Expressions.xhtml#initializer-expression" data-id="//apple_ref/swift/grammar/initializer-expression" rel="me">initializer-expression</a></span>
</p><p class="syntax-def">
  <a id="TP40014097-CH32-XID_741">&#x200c;</a>
  <span class="syntax-def-name">
  postfix-expression
</span>
<span class="arrow">
  →
</span><span class="syntactic-cat"><a href="Expressions.xhtml#explicit-member-expression" data-id="//apple_ref/swift/grammar/explicit-member-expression" rel="me">explicit-member-expression</a></span>
</p><p class="syntax-def">
  <a id="TP40014097-CH32-XID_742">&#x200c;</a>
  <span class="syntax-def-name">
  postfix-expression
</span>
<span class="arrow">
  →
</span><span class="syntactic-cat"><a href="Expressions.xhtml#postfix-self-expression" data-id="//apple_ref/swift/grammar/postfix-self-expression" rel="me">postfix-self-expression</a></span>
</p><p class="syntax-def">
  <a id="TP40014097-CH32-XID_743">&#x200c;</a>
  <span class="syntax-def-name">
  postfix-expression
</span>
<span class="arrow">
  →
</span><span class="syntactic-cat"><a href="Expressions.xhtml#dynamic-type-expression" data-id="//apple_ref/swift/grammar/dynamic-type-expression" rel="me">dynamic-type-expression</a></span>
</p><p class="syntax-def">
  <a id="TP40014097-CH32-XID_744">&#x200c;</a>
  <span class="syntax-def-name">
  postfix-expression
</span>
<span class="arrow">
  →
</span><span class="syntactic-cat"><a href="Expressions.xhtml#subscript-expression" data-id="//apple_ref/swift/grammar/subscript-expression" rel="me">subscript-expression</a></span>
</p><p class="syntax-def">
  <a id="TP40014097-CH32-XID_745">&#x200c;</a>
  <span class="syntax-def-name">
  postfix-expression
</span>
<span class="arrow">
  →
</span><span class="syntactic-cat"><a href="Expressions.xhtml#forced-value-expression" data-id="//apple_ref/swift/grammar/forced-value-expression" rel="me">forced-value-expression</a></span>
</p><p class="syntax-def">
  <a id="TP40014097-CH32-XID_746">&#x200c;</a>
  <span class="syntax-def-name">
  postfix-expression
</span>
<span class="arrow">
  →
</span><span class="syntactic-cat"><a href="Expressions.xhtml#optional-chaining-expression" data-id="//apple_ref/swift/grammar/optional-chaining-expression" rel="me">optional-chaining-expression</a></span>
</p>
</div>
 </div>
  <section class="section">
	<a id="TP40014097-CH32-XID_747">&#x200c;</a>
  <h3 class="section-name">Function Call Expression</h3>
  <p class="para">A <em>function call expression</em> consists of a function name followed by a comma-separated list of the function’s arguments in parentheses. Function call expressions have the following form:</p><span class="caption"></span>
<div class="code-outline">
  <ul class="code-outline-lines code-voice">
    <li><pre class="code-voice"><em class="variable-text">function name</em>(<em class="variable-text">argument value 1</em>, <em class="variable-text">argument value 2</em>)</pre></li>
  </ul>
</div><p class="para">The <em>function name</em> can be any expression whose value is of a function type.</p><p class="para">If the function definition includes names for its parameters, the function call must include names before its argument values separated by a colon (<code class="code-voice">:</code>). This kind of function call expression has the following form:</p><span class="caption"></span>
<div class="code-outline">
  <ul class="code-outline-lines code-voice">
    <li><pre class="code-voice"><em class="variable-text">function name</em>(<em class="variable-text">argument name 1</em>: <em class="variable-text">argument value 1</em>, <em class="variable-text">argument name 2</em>: <em class="variable-text">argument value 2</em>)</pre></li>
  </ul>
</div><p class="para">A function call expression can include a trailing closure in the form of a closure expression immediately after the closing parenthesis. The trailing closure is understood as an argument to the function, added after the last parenthesized argument. The following function calls are equivalent:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="c">// someFunction takes an integer and a closure as its arguments</code></code></li>
          <li><code class="code-voice"><code class="vc">someFunction</code>(<code class="vc">x</code>, {<code class="vc">$0</code> == <code class="m">13</code>})</code></li>
          <li><code class="code-voice"><code class="vc">someFunction</code>(<code class="vc">x</code>) {<code class="vc">$0</code> == <code class="m">13</code>}</code></li>
      </ul>



  </div>
</section><p class="para">If the trailing closure is the function’s only argument, the parentheses can be omitted.</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="c">// someFunction takes a closure as its only argument</code></code></li>
          <li><code class="code-voice"><code class="vc">myData</code>.<code class="vc">someMethod</code>() {<code class="vc">$0</code> == <code class="m">13</code>}</code></li>
          <li><code class="code-voice"><code class="vc">myData</code>.<code class="vc">someMethod</code> {<code class="vc">$0</code> == <code class="m">13</code>}</code></li>
      </ul>



  </div>
</section><div class="syntax-defs">
  <p class="syntax-defs-name">
  Grammar of a function call expression
</p><div class="syntax-defs-group">
  <p class="syntax-def">
  <a id="function-call-expression">&#x200c;</a>
  <span class="syntax-def-name">
  function-call-expression
</span>
<span class="arrow">
  →
</span><span class="syntactic-cat"><a href="Expressions.xhtml#postfix-expression" data-id="//apple_ref/swift/grammar/postfix-expression" rel="me">postfix-expression</a></span><span class="syntactic-cat"><a href="Expressions.xhtml#parenthesized-expression" data-id="//apple_ref/swift/grammar/parenthesized-expression" rel="me">parenthesized-expression</a></span>
</p><p class="syntax-def">
  <a id="TP40014097-CH32-XID_750">&#x200c;</a>
  <span class="syntax-def-name">
  function-call-expression
</span>
<span class="arrow">
  →
</span><span class="syntactic-cat"><a href="Expressions.xhtml#postfix-expression" data-id="//apple_ref/swift/grammar/postfix-expression" rel="me">postfix-expression</a></span><span class="optional"><span class="syntactic-cat"><a href="Expressions.xhtml#parenthesized-expression" data-id="//apple_ref/swift/grammar/parenthesized-expression" rel="me">parenthesized-expression</a></span><sub class="subscript">opt</sub></span><span class="syntactic-cat"><a href="Expressions.xhtml#trailing-closure" data-id="//apple_ref/swift/grammar/trailing-closure" rel="me">trailing-closure</a></span>
</p><p class="syntax-def">
  <a id="trailing-closure">&#x200c;</a>
  <span class="syntax-def-name">
  trailing-closure
</span>
<span class="arrow">
  →
</span><span class="syntactic-cat"><a href="Expressions.xhtml#closure-expression" data-id="//apple_ref/swift/grammar/closure-expression" rel="me">closure-expression</a></span>
</p>
</div>
 </div>
  
</section>
<section class="section">
	<a id="TP40014097-CH32-XID_752">&#x200c;</a>
  <h3 class="section-name">Initializer Expression</h3>
  <p class="para">An <em>initializer expression</em> provides access to a type’s initializer. It has the following form:</p><span class="caption"></span>
<div class="code-outline">
  <ul class="code-outline-lines code-voice">
    <li><pre class="code-voice"><em class="variable-text">expression</em>.<code class="kt">init</code>(<em class="variable-text">initializer arguments</em>)</pre></li>
  </ul>
</div><p class="para">You use the initializer expression in a function call expression to initialize a new instance of a type. Unlike functions, an initializer can’t be used as a value. For example:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="kt">var</code> <code class="vc">x</code> = <code class="vc">SomeClass</code>.<code class="vc">someClassFunction</code> <code class="c">// ok</code></code></li>
          <li><code class="code-voice"><code class="kt">var</code> <code class="vc">y</code> = <code class="vc">SomeClass</code>.<code class="kt">init</code>              <code class="c">// error</code></code></li>
      </ul>



  </div>
</section><p class="para">You also use an initializer expression to delegate to the initializer of a superclass.</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="kt">class</code> <code class="vc">SomeSubClass</code>: <code class="n"><!-- a href="" logicalPath="" -->SomeSuperClass<!-- /a --></code> {</code></li>
          <li><code class="code-voice">    <code class="kt">init</code>() {</code></li>
          <li><code class="code-voice">        <code class="c">// subclass initialization goes here</code></code></li>
          <li><code class="code-voice">        <code class="kt">super</code>.<code class="kt">init</code>()</code></li>
          <li><code class="code-voice">    }</code></li>
          <li><code class="code-voice">}</code></li>
      </ul>



  </div>
</section><div class="syntax-defs">
  <p class="syntax-defs-name">
  Grammar of an initializer expression
</p><div class="syntax-defs-group">
  <p class="syntax-def">
  <a id="initializer-expression">&#x200c;</a>
  <span class="syntax-def-name">
  initializer-expression
</span>
<span class="arrow">
  →
</span><span class="syntactic-cat"><a href="Expressions.xhtml#postfix-expression" data-id="//apple_ref/swift/grammar/postfix-expression" rel="me">postfix-expression</a></span><code class="literal">.</code><code class="literal">init</code>
</p>
</div>
 </div>
  
</section>
<section class="section">
	<a id="TP40014097-CH32-XID_755">&#x200c;</a>
  <h3 class="section-name">Explicit Member Expression</h3>
  <p class="para">A <em>explicit member expression</em> allows access to the members of a named type, a tuple, or a module. It consists of a period (<code class="code-voice">.</code>) between the item and the identifier of its member.</p><span class="caption"></span>
<div class="code-outline">
  <ul class="code-outline-lines code-voice">
    <li><pre class="code-voice"><em class="variable-text">expression</em>.<em class="variable-text">member name</em></pre></li>
  </ul>
</div><p class="para">The members of a named type are named as part of the type’s declaration or extension. For example:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="kt">class</code> <code class="vc">SomeClass</code> {</code></li>
          <li><code class="code-voice">    <code class="kt">var</code> <code class="vc">someProperty</code> = <code class="m">42</code></code></li>
          <li><code class="code-voice">}</code></li>
          <li><code class="code-voice"><code class="kt">let</code> <code class="vc">c</code> = <code class="vc">SomeClass</code>()</code></li>
          <li><code class="code-voice"><code class="kt">let</code> <code class="vc">y</code> = <code class="vc">c</code>.<code class="vc">someProperty</code>  <code class="c">// Member access</code></code></li>
      </ul>



  </div>
</section><p class="para">The members of a tuple are implicitly named using integers in the order they appear, starting from zero. For example:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="kt">var</code> <code class="vc">t</code> = (<code class="m">10</code>, <code class="m">20</code>, <code class="m">30</code>)</code></li>
          <li><code class="code-voice"><code class="vc">t</code>.<code class="m">0</code> = <code class="vc">t</code>.<code class="m">1</code></code></li>
          <li><code class="code-voice"><code class="c">// Now t is (20, 20, 30)</code></code></li>
      </ul>



  </div>
</section><p class="para">The members of a module access the top-level declarations of that module.</p><div class="syntax-defs">
  <p class="syntax-defs-name">
  Grammar of an explicit member expression
</p><div class="syntax-defs-group">
  <p class="syntax-def">
  <a id="explicit-member-expression">&#x200c;</a>
  <span class="syntax-def-name">
  explicit-member-expression
</span>
<span class="arrow">
  →
</span><span class="syntactic-cat"><a href="Expressions.xhtml#postfix-expression" data-id="//apple_ref/swift/grammar/postfix-expression" rel="me">postfix-expression</a></span><code class="literal">.</code><span class="syntactic-cat"><a href="LexicalStructure.xhtml#decimal-digit" data-id="//apple_ref/swift/grammar/decimal-digit" rel="me">decimal-digit</a></span>
</p><p class="syntax-def">
  <a id="TP40014097-CH32-XID_758">&#x200c;</a>
  <span class="syntax-def-name">
  explicit-member-expression
</span>
<span class="arrow">
  →
</span><span class="syntactic-cat"><a href="Expressions.xhtml#postfix-expression" data-id="//apple_ref/swift/grammar/postfix-expression" rel="me">postfix-expression</a></span><code class="literal">.</code><span class="syntactic-cat"><a href="LexicalStructure.xhtml#identifier" data-id="//apple_ref/swift/grammar/identifier" rel="me">identifier</a></span><span class="optional"><span class="syntactic-cat"><a href="GenericParametersAndArguments.xhtml#generic-argument-clause" data-id="//apple_ref/swift/grammar/generic-argument-clause" rel="me">generic-argument-clause</a></span><sub class="subscript">opt</sub></span>
</p>
</div>
 </div>
  
</section>
<section class="section">
	<a id="TP40014097-CH32-XID_759">&#x200c;</a>
  <h3 class="section-name">Postfix Self Expression</h3>
  <p class="para">A postfix <code class="code-voice">self</code> expression consists of an expression or the name of a type, immediately followed by <code class="code-voice">.self</code>. It has the following forms:</p><span class="caption"></span>
<div class="code-outline">
  <ul class="code-outline-lines code-voice">
    <li><pre class="code-voice"><em class="variable-text">expression</em>.<code class="kt">self</code></pre></li><li><pre class="code-voice"><em class="variable-text">type</em>.<code class="kt">self</code></pre></li>
  </ul>
</div><p class="para">The first form evaluates to the value of the <em>expression</em>. For example, <code class="code-voice">x.self</code> evaluates to <code class="code-voice">x</code>.</p><p class="para">The second form evaluates to the value of the <em>type</em>. Use this form to access a type as a value. For example, because <code class="code-voice">SomeClass.self</code> evaluates to the <code class="code-voice">SomeClass</code> type itself, you can pass it to a function or method that accepts a type-level argument.</p><div class="syntax-defs">
  <p class="syntax-defs-name">
  Grammar of a self expression
</p><div class="syntax-defs-group">
  <p class="syntax-def">
  <a id="postfix-self-expression">&#x200c;</a>
  <span class="syntax-def-name">
  postfix-self-expression
</span>
<span class="arrow">
  →
</span><span class="syntactic-cat"><a href="Expressions.xhtml#postfix-expression" data-id="//apple_ref/swift/grammar/postfix-expression" rel="me">postfix-expression</a></span><code class="literal">.</code><code class="literal">self</code>
</p>
</div>
 </div>
  
</section>
<section class="section">
	<a id="TP40014097-CH32-XID_762">&#x200c;</a>
  <h3 class="section-name">Dynamic Type Expression</h3>
  <p class="para">A <code class="code-voice">dynamicType</code> expression consists of an expression, immediately followed by <code class="code-voice">.dynamicType</code>. It has the following form:</p><span class="caption"></span>
<div class="code-outline">
  <ul class="code-outline-lines code-voice">
    <li><pre class="code-voice"><em class="variable-text">expression</em>.<code class="kt">dynamicType</code></pre></li>
  </ul>
</div><p class="para">The <em>expression</em> can’t be the name of a type. The entire <code class="code-voice">dynamicType</code> expression evaluates to the value of the runtime type of the <em>expression</em>, as the following example shows:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="kt">class</code> <code class="vc">SomeBaseClass</code> {</code></li>
          <li><code class="code-voice">    <code class="kt">class</code> <code class="kt">func</code> <code class="vc">printClassName</code>() {</code></li>
          <li><code class="code-voice">        <code class="vc">println</code>(<code class="s">&quot;SomeBaseClass&quot;</code>)</code></li>
          <li><code class="code-voice">    }</code></li>
          <li><code class="code-voice">}</code></li>
          <li><code class="code-voice"><code class="kt">class</code> <code class="vc">SomeSubClass</code>: <code class="n"><!-- a href="" logicalPath="" -->SomeBaseClass<!-- /a --></code> {</code></li>
          <li><code class="code-voice">    <code class="kt">override</code> <code class="kt">class</code> <code class="kt">func</code> <code class="vc">printClassName</code>() {</code></li>
          <li><code class="code-voice">        <code class="vc">println</code>(<code class="s">&quot;SomeSubClass&quot;</code>)</code></li>
          <li><code class="code-voice">    }</code></li>
          <li><code class="code-voice">}</code></li>
          <li><code class="code-voice"><code class="kt">let</code> <code class="vc">someInstance</code>: <code class="n"><!-- a href="" logicalPath="" -->SomeBaseClass<!-- /a --></code> = <code class="vc">SomeSubClass</code>()</code></li>
          <li><code class="code-voice"><code class="c">// someInstance is of type SomeBaseClass at compile time, but</code></code></li>
          <li><code class="code-voice"><code class="c">// someInstance is of type SomeSubClass at runtime</code></code></li>
          <li><code class="code-voice"><code class="vc">someInstance</code>.<code class="kt">dynamicType</code>.<code class="vc">printClassName</code>()</code></li>
          <li><code class="code-voice"><code class="c">// prints &quot;SomeSubClass&quot;</code></code></li>
      </ul>



  </div>
</section><div class="syntax-defs">
  <p class="syntax-defs-name">
  Grammar of a dynamic type expression
</p><div class="syntax-defs-group">
  <p class="syntax-def">
  <a id="dynamic-type-expression">&#x200c;</a>
  <span class="syntax-def-name">
  dynamic-type-expression
</span>
<span class="arrow">
  →
</span><span class="syntactic-cat"><a href="Expressions.xhtml#postfix-expression" data-id="//apple_ref/swift/grammar/postfix-expression" rel="me">postfix-expression</a></span><code class="literal">.</code><code class="literal">dynamicType</code>
</p>
</div>
 </div>
  
</section>
<section class="section">
	<a id="TP40014097-CH32-XID_765">&#x200c;</a>
  <h3 class="section-name">Subscript Expression</h3>
  <p class="para">A <em>subscript expression</em> provides subscript access using the getter and setter of the corresponding subscript declaration. It has the following form:</p><span class="caption"></span>
<div class="code-outline">
  <ul class="code-outline-lines code-voice">
    <li><pre class="code-voice"><em class="variable-text">expression</em>[<em class="variable-text">index expressions</em>]</pre></li>
  </ul>
</div><p class="para">To evaluate the value of a subscript expression, the subscript getter for the <em>expression</em>’s type is called with the <em>index expressions</em> passed as the subscript parameters. To set its value, the subscript setter is called in the same way.</p><p class="para">For information about subscript declarations, see <a href="Declarations.xhtml#TP40014097-CH34-XID_619" data-id="//apple_ref/doc/uid/TP40014097-CH34-XID_619" rel="me">Protocol Subscript Declaration</a>.</p><div class="syntax-defs">
  <p class="syntax-defs-name">
  Grammar of a subscript expression
</p><div class="syntax-defs-group">
  <p class="syntax-def">
  <a id="subscript-expression">&#x200c;</a>
  <span class="syntax-def-name">
  subscript-expression
</span>
<span class="arrow">
  →
</span><span class="syntactic-cat"><a href="Expressions.xhtml#postfix-expression" data-id="//apple_ref/swift/grammar/postfix-expression" rel="me">postfix-expression</a></span><code class="literal">[</code><span class="syntactic-cat"><a href="Expressions.xhtml#expression-list" data-id="//apple_ref/swift/grammar/expression-list" rel="me">expression-list</a></span><code class="literal">]</code>
</p>
</div>
 </div>
  
</section>
<section class="section">
	<a id="TP40014097-CH32-XID_768">&#x200c;</a>
  <h3 class="section-name">Forced-Value Expression</h3>
  <p class="para">A <em>forced-value expression</em> unwraps an optional value that you are certain is not <code class="code-voice">nil</code>. It has the following form:</p><span class="caption"></span>
<div class="code-outline">
  <ul class="code-outline-lines code-voice">
    <li><pre class="code-voice"><em class="variable-text">expression</em>!</pre></li>
  </ul>
</div><p class="para">If the value of the <em>expression</em> is not <code class="code-voice">nil</code>, the optional value is unwrapped and returned with the corresponding nonoptional type. Otherwise, a runtime error is raised.</p><div class="syntax-defs">
  <p class="syntax-defs-name">
  Grammar of a forced-value expression
</p><div class="syntax-defs-group">
  <p class="syntax-def">
  <a id="forced-value-expression">&#x200c;</a>
  <span class="syntax-def-name">
  forced-value-expression
</span>
<span class="arrow">
  →
</span><span class="syntactic-cat"><a href="Expressions.xhtml#postfix-expression" data-id="//apple_ref/swift/grammar/postfix-expression" rel="me">postfix-expression</a></span><code class="literal">!</code>
</p>
</div>
 </div>
  
</section>
<section class="section">
	<a id="TP40014097-CH32-XID_771">&#x200c;</a>
  <h3 class="section-name">Optional-Chaining Expression</h3>
  <p class="para">An <em>optional-chaining expression</em> provides a simplified syntax for using optional values in postfix expressions. It has the following form:</p><span class="caption"></span>
<div class="code-outline">
  <ul class="code-outline-lines code-voice">
    <li><pre class="code-voice"><em class="variable-text">expression</em>?</pre></li>
  </ul>
</div><p class="para">On its own, the postfix <code class="code-voice">?</code> operator simply returns the value of its argument as an optional.</p><p class="para">Postfix expressions that contain an optional-chaining expression are evaluated in a special way. If the optional-chaining expression is <code class="code-voice">nil</code>, all of the other operations in the postfix expression are ignored and the entire postfix expression evaluates to <code class="code-voice">nil</code>. If the optional-chaining expression is not <code class="code-voice">nil</code>, the value of the optional-chaining expression is unwrapped and used to evaluate the rest of the postfix expression. In either case, the value of the postfix expression is still of an optional type.</p><p class="para">If a postfix expression that contains an optional-chaining expression is nested inside other postfix expressions, only the outermost expression returns an optional type. In the example below, when <code class="code-voice">c</code> is not <code class="code-voice">nil</code>, its value is unwrapped and used to evaluate both <code class="code-voice">.property</code> and <code class="code-voice">.performAction()</code>, and the entire expression <code class="code-voice">c?.property.performAction()</code> has a value of an optional type.</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="kt">var</code> <code class="vc">c</code>: <code class="n"><!-- a href="" logicalPath="" -->SomeClass<!-- /a --></code>?</code></li>
          <li><code class="code-voice"><code class="kt">var</code> <code class="vc">result</code>: <code class="n"><!-- a href="" logicalPath="" -->Bool<!-- /a --></code>? = <code class="vc">c</code>?.<code class="vc">property</code>.<code class="vc">performAction</code>()</code></li>
      </ul>



  </div>
</section><p class="para">The following example shows the behavior of the example above without using optional chaining.</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="kt">if</code> <code class="kt">let</code> <code class="vc">unwrappedC</code> = <code class="vc">c</code> {</code></li>
          <li><code class="code-voice">    <code class="vc">result</code> = <code class="vc">unwrappedC</code>.<code class="vc">property</code>.<code class="vc">performAction</code>()</code></li>
          <li><code class="code-voice">}</code></li>
      </ul>



  </div>
</section><div class="syntax-defs">
  <p class="syntax-defs-name">
  Grammar of an optional-chaining expression
</p><div class="syntax-defs-group">
  <p class="syntax-def">
  <a id="optional-chaining-expression">&#x200c;</a>
  <span class="syntax-def-name">
  optional-chaining-expression
</span>
<span class="arrow">
  →
</span><span class="syntactic-cat"><a href="Expressions.xhtml#postfix-expression" data-id="//apple_ref/swift/grammar/postfix-expression" rel="me">postfix-expression</a></span><code class="literal">?</code>
</p>
</div>
 </div>
  
</section>

</section>

  </article>
</div>
    </div>
  </body>
</html>
