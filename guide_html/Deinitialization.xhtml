<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
  	<link href="epub.css" media="all" rel="stylesheet" type="text/css" />
  	<script type="text/javascript" src="svg.js"></script>
  </head>
  <body id="conceptual_flow_with_tasks">
    <div class="content-wrapper">
      <div id="chapter_container" class='conceptualwithtasks'>
  <article class="chapter">
    <a id="TP40014097-CH19">&#x200c;</a><a id="TP40014097-CH19-XID_182">&#x200c;</a>
    <h2 class="chapter-name">Deinitialization</h2>
      
      	<section class="section">
      		<p class="para">A <em>deinitializer</em> is called immediately before a class instance is deallocated. You write deinitializers with the <code class="code-voice">deinit</code> keyword, similar to how intializers are written with the <code class="code-voice">init</code> keyword. Deinitializers are only available on class types.</p>
    		</section> 


      <section class="section">
	<a id="TP40014097-CH19-XID_183">&#x200c;</a>
  <h3 class="section-name">How Deinitialization Works</h3>
  <p class="para">Swift automatically deallocates your instances when they are no longer needed, to free up resources. Swift handles the memory management of instances through <em>automatic reference counting</em> (<em>ARC</em>), as described in <a href="AutomaticReferenceCounting.xhtml" data-id="//apple_ref/doc/uid/TP40014097-CH20-XID_50" rel="me">Automatic Reference Counting</a>. Typically you don’t need to perform manual clean-up when your instances are deallocated. However, when you are working with your own resources, you might need to perform some additional clean-up yourself. For example, if you create a custom class to open a file and write some data to it, you might need to close the file before the class instance is deallocated.</p><p class="para">Class definitions can have at most one deinitializer per class. The deinitializer does not take any parameters and is written without parentheses:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="kt">deinit</code> {</code></li>
          <li><code class="code-voice">    <code class="c">// perform the deinitialization</code></code></li>
          <li><code class="code-voice">}</code></li>
      </ul>



  </div>
</section><p class="para">Deinitializers are called automatically, just before instance deallocation takes place. You are not allowed to call a deinitializer yourself. Superclass deinitializers are inherited by their subclasses, and the superclass deinitializer is called automatically at the end of a subclass deinitializer implementation. Superclass deinitializers are always called, even if a subclass does not provide its own deinitializer.</p><p class="para">Because an instance is not deallocated until after its deinitializer is called, a deinitializer can access all properties of the instance it is called on and can modify its behavior based on those properties (such as looking up the name of a file that needs to be closed).</p>
  
</section>
<section class="section">
	<a id="TP40014097-CH19-XID_184">&#x200c;</a>
  <h3 class="section-name">Deinitializers in Action</h3>
  <p class="para">Here’s an example of a deinitializer in action. This example defines two new types, <code class="code-voice">Bank</code> and <code class="code-voice">Player</code>, for a simple game. The <code class="code-voice">Bank</code> structure manages a made-up currency, which can never have more than 10,000 coins in circulation. There can only ever be one <code class="code-voice">Bank</code> in the game, and so the <code class="code-voice">Bank</code> is implemented as a structure with static properties and methods to store and manage its current state:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="kt">struct</code> <code class="vc">Bank</code> {</code></li>
          <li><code class="code-voice">    <code class="kt">static</code> <code class="kt">var</code> <code class="vc">coinsInBank</code> = <code class="m">10_000</code></code></li>
          <li><code class="code-voice">    <code class="kt">static</code> <code class="kt">func</code> <code class="vc">vendCoins</code>(<code class="kt">var</code> <code class="vc">numberOfCoinsToVend</code>: <code class="n"><!-- a href="" logicalPath="" -->Int<!-- /a --></code>) -&gt; <code class="n"><!-- a href="" logicalPath="" -->Int<!-- /a --></code> {</code></li>
          <li><code class="code-voice">        <code class="vc">numberOfCoinsToVend</code> = <code class="vc">min</code>(<code class="vc">numberOfCoinsToVend</code>, <code class="vc">coinsInBank</code>)</code></li>
          <li><code class="code-voice">        <code class="vc">coinsInBank</code> -= <code class="vc">numberOfCoinsToVend</code></code></li>
          <li><code class="code-voice">        <code class="kt">return</code> <code class="vc">numberOfCoinsToVend</code></code></li>
          <li><code class="code-voice">    }</code></li>
          <li><code class="code-voice">    <code class="kt">static</code> <code class="kt">func</code> <code class="vc">receiveCoins</code>(<code class="vc">coins</code>: <code class="n"><!-- a href="" logicalPath="" -->Int<!-- /a --></code>) {</code></li>
          <li><code class="code-voice">        <code class="vc">coinsInBank</code> += <code class="vc">coins</code></code></li>
          <li><code class="code-voice">    }</code></li>
          <li><code class="code-voice">}</code></li>
      </ul>



  </div>
</section><p class="para"><code class="code-voice">Bank</code> keeps track of the current number of coins it holds with its <code class="code-voice">coinsInBank</code> property. It also offers two methods—<code class="code-voice">vendCoins</code> and <code class="code-voice">receiveCoins</code>—to handle the distribution and collection of coins.</p><p class="para"><code class="code-voice">vendCoins</code> checks that there are enough coins in the bank before distributing them. If there are not enough coins, <code class="code-voice">Bank</code> returns a smaller number than the number that was requested (and returns zero if no coins are left in the bank). <code class="code-voice">vendCoins</code> declares <code class="code-voice">numberOfCoinsToVend</code> as a variable parameter, so that the number can be modified within the method’s body without the need to declare a new variable. It returns an integer value to indicate the actual number of coins that were provided.</p><p class="para">The <code class="code-voice">receiveCoins</code> method simply adds the received number of coins back into the bank’s coin store.</p><p class="para">The <code class="code-voice">Player</code> class describes a player in the game. Each player has a certain number of coins stored in their purse at any time. This is represented by the player’s <code class="code-voice">coinsInPurse</code> property:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="kt">class</code> <code class="vc">Player</code> {</code></li>
          <li><code class="code-voice">    <code class="kt">var</code> <code class="vc">coinsInPurse</code>: <code class="n"><!-- a href="" logicalPath="" -->Int<!-- /a --></code></code></li>
          <li><code class="code-voice">    <code class="kt">init</code>(<code class="vc">coins</code>: <code class="n"><!-- a href="" logicalPath="" -->Int<!-- /a --></code>) {</code></li>
          <li><code class="code-voice">        <code class="vc">coinsInPurse</code> = <code class="vc">Bank</code>.<code class="vc">vendCoins</code>(<code class="vc">coins</code>)</code></li>
          <li><code class="code-voice">    }</code></li>
          <li><code class="code-voice">    <code class="kt">func</code> <code class="vc">winCoins</code>(<code class="vc">coins</code>: <code class="n"><!-- a href="" logicalPath="" -->Int<!-- /a --></code>) {</code></li>
          <li><code class="code-voice">        <code class="vc">coinsInPurse</code> += <code class="vc">Bank</code>.<code class="vc">vendCoins</code>(<code class="vc">coins</code>)</code></li>
          <li><code class="code-voice">    }</code></li>
          <li><code class="code-voice">    <code class="kt">deinit</code> {</code></li>
          <li><code class="code-voice">        <code class="vc">Bank</code>.<code class="vc">receiveCoins</code>(<code class="vc">coinsInPurse</code>)</code></li>
          <li><code class="code-voice">    }</code></li>
          <li><code class="code-voice">}</code></li>
      </ul>



  </div>
</section><p class="para">Each <code class="code-voice">Player</code> instance is initialized with a starting allowance of a specified number of coins from the bank during initialization, although a <code class="code-voice">Player</code> instance may receive fewer than that number if not enough coins are available.</p><p class="para">The <code class="code-voice">Player</code> class defines a <code class="code-voice">winCoins</code> method, which retrieves a certain number of coins from the bank and adds them to the player’s purse. The <code class="code-voice">Player</code> class also implements a deinitializer, which is called just before a <code class="code-voice">Player</code> instance is deallocated. Here, the deinitializer simply returns all of the player’s coins to the bank:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="kt">var</code> <code class="vc">playerOne</code>: <code class="n"><!-- a href="" logicalPath="" -->Player<!-- /a --></code>? = <code class="vc">Player</code>(<code class="vc">coins</code>: <code class="m">100</code>)</code></li>
          <li><code class="code-voice"><code class="vc">println</code>(<code class="s">&quot;A new player has joined the game with </code>\(<code class="vc">playerOne</code>!.<code class="vc">coinsInPurse</code>)<code class="s"> coins&quot;</code>)</code></li>
          <li><code class="code-voice"><code class="c">// prints &quot;A new player has joined the game with 100 coins&quot;</code></code></li>
          <li><code class="code-voice"><code class="vc">println</code>(<code class="s">&quot;There are now </code>\(<code class="vc">Bank</code>.<code class="vc">coinsInBank</code>)<code class="s"> coins left in the bank&quot;</code>)</code></li>
          <li><code class="code-voice"><code class="c">// prints &quot;There are now 9900 coins left in the bank&quot;</code></code></li>
      </ul>



  </div>
</section><p class="para">A new <code class="code-voice">Player</code> instance is created, with a request for 100 coins if they are available. This <code class="code-voice">Player</code> instance is stored in an optional <code class="code-voice">Player</code> variable called <code class="code-voice">playerOne</code>. An optional variable is used here, because players can leave the game at any point. The optional lets you track whether there is currently a player in the game.</p><p class="para">Because <code class="code-voice">playerOne</code> is an optional, it is qualified with an exclamation mark (<code class="code-voice">!</code>) when its <code class="code-voice">coinsInPurse</code> property is accessed to print its default number of coins, and whenever its <code class="code-voice">winCoins</code> method is called:</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="vc">playerOne</code>!.<code class="vc">winCoins</code>(<code class="m">2_000</code>)</code></li>
          <li><code class="code-voice"><code class="vc">println</code>(<code class="s">&quot;PlayerOne won 2000 coins &amp; now has </code>\(<code class="vc">playerOne</code>!.<code class="vc">coinsInPurse</code>)<code class="s"> coins&quot;</code>)</code></li>
          <li><code class="code-voice"><code class="c">// prints &quot;PlayerOne won 2000 coins &amp; now has 2100 coins&quot;</code></code></li>
          <li><code class="code-voice"><code class="vc">println</code>(<code class="s">&quot;The bank now only has </code>\(<code class="vc">Bank</code>.<code class="vc">coinsInBank</code>)<code class="s"> coins left&quot;</code>)</code></li>
          <li><code class="code-voice"><code class="c">// prints &quot;The bank now only has 7900 coins left&quot;</code></code></li>
      </ul>



  </div>
</section><p class="para">Here, the player has won 2,000 coins. The player’s purse now contains 2,100 coins, and the bank has only 7,900 coins left.</p><section class="code-listing">
  
  <span class="caption"></span>
  <div class="code-sample">

      <ul class="code-lines">
          <li><code class="code-voice"><code class="vc">playerOne</code> = <code class="vc">nil</code></code></li>
          <li><code class="code-voice"><code class="vc">println</code>(<code class="s">&quot;PlayerOne has left the game&quot;</code>)</code></li>
          <li><code class="code-voice"><code class="c">// prints &quot;PlayerOne has left the game&quot;</code></code></li>
          <li><code class="code-voice"><code class="vc">println</code>(<code class="s">&quot;The bank now has </code>\(<code class="vc">Bank</code>.<code class="vc">coinsInBank</code>)<code class="s"> coins&quot;</code>)</code></li>
          <li><code class="code-voice"><code class="c">// prints &quot;The bank now has 10000 coins&quot;</code></code></li>
      </ul>



  </div>
</section><p class="para">The player has now left the game. This is indicated by setting the optional <code class="code-voice">playerOne</code> variable to <code class="code-voice">nil</code>, meaning “no <code class="code-voice">Player</code> instance.” At the point that this happens, the <code class="code-voice">playerOne</code> variable’s reference to the <code class="code-voice">Player</code> instance is broken. No other properties or variables are still referring to the <code class="code-voice">Player</code> instance, and so it is deallocated in order to free up its memory. Just before this happens, its deinitializer is called automatically, and its coins are returned to the bank.</p>
  
</section>

  </article>
</div>
    </div>
  </body>
</html>
