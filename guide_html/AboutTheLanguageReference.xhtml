<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
  	<link href="epub.css" media="all" rel="stylesheet" type="text/css" />
  	<script type="text/javascript" src="svg.js"></script>
  </head>
  <body id="conceptual_flow_with_tasks">
    <div class="content-wrapper">
      <div id="chapter_container" class='conceptualwithtasks'>
  <article class="chapter">
    <a id="TP40014097-CH29">&#x200c;</a><a id="TP40014097-CH29-XID_453">&#x200c;</a>
    <h2 class="chapter-name">About the Language Reference</h2>
      
      	<section class="section">
      		<p class="para">This part of the book describes the formal grammar of the Swift programming language. The grammar described here is intended to help you understand the language in more detail, rather than to allow you to directly implement a parser or compiler.</p><p class="para">The Swift language is relatively small, because many common types, functions, and operators that appear virtually everywhere in Swift code are actually defined in the Swift standard library. Although these types, functions, and operators are not part of the Swift language itself, they are used extensively in the discussions and code examples in this part of the book.</p>
    		</section> 


      <section class="section">
	<a id="TP40014097-CH29-XID_454">&#x200c;</a>
  <h3 class="section-name">How to Read the Grammar</h3>
  <p class="para">The notation used to describe the formal grammar of the Swift programming language follows a few conventions:</p><ul class="list-bullet">
  <li class="item"><p class="para">An arrow (→) is used to mark grammar productions and can be read as “can consist of.“</p></li><li class="item"><p class="para">Syntactic categories are indicated by <em>italic</em> text and appear on both sides of a grammar production rule.</p></li><li class="item"><p class="para">Literal words and punctuation are indicated by boldface <code class="code-voice">constant width</code> text and appear only on the right-hand side of a grammar production rule.</p></li><li class="item"><p class="para">Alternative grammar productions are separated by vertical bars (|). When alternative productions are too long to read easily, they are broken into multiple grammar production rules on new lines.</p></li><li class="item"><p class="para">In a few cases, regular font text is used to describe the right-hand side of a grammar production rule.</p></li><li class="item"><p class="para">Optional syntactic categories and literals are marked by a trailing subscript, <em>opt</em>.</p></li>
</ul><p class="para">As an example, the grammar of a getter-setter block is defined as follows:</p><div class="syntax-defs">
  <p class="syntax-defs-name">
  Grammar of a getter-setter block
</p><div class="syntax-defs-group">
  <p class="syntax-def">
  <a id="TP40014097-CH29-XID_456">&#x200c;</a>
  <span class="syntax-def-name">
  getter-setter-block
</span>
<span class="arrow">
  →
</span><span class="alternative">
  <code class="literal">{</code><span class="syntactic-cat"><a href="Declarations.xhtml#getter-clause" data-id="//apple_ref/swift/grammar/getter-clause" rel="me">getter-clause</a></span><span class="optional"><span class="syntactic-cat"><a href="Declarations.xhtml#setter-clause" data-id="//apple_ref/swift/grammar/setter-clause" rel="me">setter-clause</a></span><sub class="subscript">opt</sub></span><code class="literal">}</code>
</span><span class="alternative">
  <code class="literal">{</code><span class="syntactic-cat"><a href="Declarations.xhtml#setter-clause" data-id="//apple_ref/swift/grammar/setter-clause" rel="me">setter-clause</a></span><span class="syntactic-cat"><a href="Declarations.xhtml#getter-clause" data-id="//apple_ref/swift/grammar/getter-clause" rel="me">getter-clause</a></span><code class="literal">}</code>
</span>
</p>
</div>
 </div><p class="para">This definition indicates that a getter-setter block can consist of a getter clause followed by an optional setter clause, enclosed in braces, <em>or</em> a setter clause followed by a getter clause, enclosed in braces. The grammar production above is equivalent to the following two productions, where the alternatives are spelled out explicitly:</p><div class="syntax-defs">
  <p class="syntax-defs-name">
  Grammar of a getter setter block
</p><div class="syntax-defs-group">
  <p class="syntax-def">
  <a id="TP40014097-CH29-XID_458">&#x200c;</a>
  <span class="syntax-def-name">
  getter-setter-block
</span>
<span class="arrow">
  →
</span><code class="literal">{</code><span class="syntactic-cat"><a href="Declarations.xhtml#getter-clause" data-id="//apple_ref/swift/grammar/getter-clause" rel="me">getter-clause</a></span><span class="optional"><span class="syntactic-cat"><a href="Declarations.xhtml#setter-clause" data-id="//apple_ref/swift/grammar/setter-clause" rel="me">setter-clause</a></span><sub class="subscript">opt</sub></span><code class="literal">}</code>
</p><p class="syntax-def">
  <a id="TP40014097-CH29-XID_459">&#x200c;</a>
  <span class="syntax-def-name">
  getter-setter-block
</span>
<span class="arrow">
  →
</span><code class="literal">{</code><span class="syntactic-cat"><a href="Declarations.xhtml#setter-clause" data-id="//apple_ref/swift/grammar/setter-clause" rel="me">setter-clause</a></span><span class="syntactic-cat"><a href="Declarations.xhtml#getter-clause" data-id="//apple_ref/swift/grammar/getter-clause" rel="me">getter-clause</a></span><code class="literal">}</code>
</p>
</div>
 </div>
  
</section>

  </article>
</div>
    </div>
  </body>
</html>
